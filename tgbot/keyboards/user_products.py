# tgbot/keyboards/user_products.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from tgbot.misc.callback_factory import ProductViewCallback, FavoriteActionCallback, FilterCallback

def products_keyboard(products, with_filter: bool = True, page: int = 0, items_per_page: int = 5) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ–ø—Ü–∏—è–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.
    
    Args:
        products: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        with_filter: –§–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        items_per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    builder = InlineKeyboardBuilder()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(products))
    current_page_products = products[start_idx:end_idx]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for product in current_page_products:
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
        view_button = InlineKeyboardButton(
            text=f"üîç {product.name}",
            callback_data=ProductViewCallback(product_id=product.product_id).pack()
        )
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        favorite_button = InlineKeyboardButton(
            text="‚≠êÔ∏è",
            callback_data=FavoriteActionCallback(action="add", product_id=product.product_id).pack()
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        builder.row(view_button, favorite_button)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"page_{page-1}"
            )
        )
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    pagination_buttons.append(
        InlineKeyboardButton(
            text=f"üìÑ {page+1}/{(len(products) + items_per_page - 1) // items_per_page}",
            callback_data="current_page"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if end_idx < len(products):
        pagination_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è",
                callback_data=f"page_{page+1}"
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if len(products) > items_per_page:
        builder.row(*pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    bottom_row = []
    
    if with_filter:
        bottom_row.append(
            InlineKeyboardButton(
                text="üîç –§–∏–ª—å—Ç—Ä—ã",
                callback_data="filter_products"
            )
        )
    
    bottom_row.append(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="main_menu"
        )
    )
    
    builder.row(*bottom_row)
    
    return builder.as_markup()

def filter_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    
    Returns:
        InlineKeyboardMarkup —Å –æ–ø—Ü–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    """
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    builder.row(
        InlineKeyboardButton(
            text="üß± –ú–∞—Ç–µ—Ä–∏–∞–ª",
            callback_data=FilterCallback(action="material").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üìã –¢–∏–ø —Ç–æ–≤–∞—Ä–∞",
            callback_data=FilterCallback(action="type").pack()
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –¶–µ–Ω–∞",
            callback_data=FilterCallback(action="price").pack()
        )
    )
    
    # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å",
            callback_data=FilterCallback(action="apply").pack()
        ),
        InlineKeyboardButton(
            text="‚ùå –°–±—Ä–æ—Å–∏—Ç—å",
            callback_data=FilterCallback(action="reset").pack()
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥",
            callback_data="main_menu"
        )
    )
    
    return builder.as_markup()

def build_materials_keyboard(materials: list) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        materials: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
    for material in materials:
        builder.row(
            InlineKeyboardButton(
                text=material,
                callback_data=material
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_filter"
        )
    )
    
    return builder.as_markup()

def build_types_keyboard(types: list) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        types: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    for product_type in types:
        builder.row(
            InlineKeyboardButton(
                text=product_type,
                callback_data=product_type
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_filter"
        )
    )
    
    return builder.as_markup()

def build_price_range_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    
    Returns:
        InlineKeyboardMarkup —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–æ–≤—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
    """
    builder = InlineKeyboardBuilder()
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    price_ranges = [
        ("–î–æ 5000‚ÇΩ", "0_5000"),
        ("5000‚ÇΩ - 10000‚ÇΩ", "5000_10000"),
        ("10000‚ÇΩ - 20000‚ÇΩ", "10000_20000"),
        ("20000‚ÇΩ - 50000‚ÇΩ", "20000_50000"),
        ("–ë–æ–ª–µ–µ 50000‚ÇΩ", "50000_any")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    for label, value in price_ranges:
        builder.row(
            InlineKeyboardButton(
                text=label,
                callback_data=value
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_filter"
        )
    )
    
    return builder.as_markup()