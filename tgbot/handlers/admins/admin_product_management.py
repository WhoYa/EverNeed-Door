# tgbot/handlers/admin_product_management.py
import logging
import re
from typing import Optional, Dict, Any, Union

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from tgbot.keyboards.product_management import (
    product_management_keyboard,
    product_list_keyboard_paginated,
    product_details_keyboard,
    edit_product_keyboard,
    confirmation_keyboard
)
from tgbot.keyboards.back_button import back_button_keyboard
from tgbot.keyboards.admin_main_menu import main_menu_keyboard
from tgbot.misc.states import ProductManagement, ProductField
from infrastructure.database.repositories.requests import RequestsRepo 
from tgbot.filters.admin import AdminFilter

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è ProductField
PREVIOUS_STATE = ProductField.PREVIOUS_STATE
EDIT_FIELD = ProductField.EDIT_FIELD
PRODUCT_ID = ProductField.PRODUCT_ID
NAME = ProductField.NAME
DESCRIPTION = ProductField.DESCRIPTION
TYPE = ProductField.TYPE
MATERIAL = ProductField.MATERIAL
PRICE = ProductField.PRICE
IMAGE_URL = ProductField.IMAGE_URL

admin_product_router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ callback_query –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ
admin_product_router.message.filter(AdminFilter())
admin_product_router.callback_query.filter(AdminFilter())


def format_product_info(product) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        product: –û–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    """
    if hasattr(product, 'formatted_info') and callable(getattr(product, 'formatted_info')):
        return product.formatted_info()
    
    # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    return (
        f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n\n"
        f"ID: {product.product_id}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–¢–∏–ø: {product.type or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {product.material or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"–¶–µ–Ω–∞: {product.price}\n"
    )

@admin_product_router.callback_query(F.data == "manage_products")
async def show_product_management_menu(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.
    """
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:",
            reply_markup=product_management_keyboard()
        )
        await callback.answer()
    except Exception as e:
        # If there's an error editing the message (e.g., message is too old),
        # send a new message instead
        logging.error(f"Error editing message: {e}")
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:",
            reply_markup=product_management_keyboard()
        )
        await callback.answer()

@admin_product_router.callback_query(F.data == "view_products")
async def view_products_handler(callback: CallbackQuery, repo: RequestsRepo):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 1 —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤."""
    products = await repo.products.get_all_products()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ ID
    products.sort(key=lambda x: x.product_id)
    
    if not products:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            await callback.message.delete()
        except Exception:
            pass
            
        await callback.message.answer(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=product_management_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç 
    text_lines = ["–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä. 1):\n"]
    for p in products[:5]:  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        text_lines.append(f"- ID: {p.product_id}, ¬´{p.name}¬ª, —Ü–µ–Ω–∞: {p.price}")
    text_output = "\n".join(text_lines)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1
    keyboard = product_list_keyboard_paginated(products, page=1, page_size=5)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
    try:
        await callback.message.delete()
    except Exception:
        pass
        
    await callback.message.answer(text_output, reply_markup=keyboard)


@admin_product_router.callback_query(F.data.regexp(r"^view_products_page_(\d+)$"))
async def view_products_page_handler(callback: CallbackQuery, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "view_products_page_X" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    match = re.match(r"^view_products_page_(\d+)$", callback.data)
    if not match:
        return

    page = int(match.group(1))

    products = await repo.products.get_all_products()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ ID
    products.sort(key=lambda x: x.product_id)
    
    total_products = len(products)

    if not products or page < 1:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", show_alert=True)
        return
    
    # –¢–µ–∫—Å—Ç ‚Äì —É—Ç–æ—á–Ω—è–µ–º, –∫–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    text_lines = [f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä. {page}):\n"]
    page_size = 5
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    for p in products[start_index:end_index]:
        text_lines.append(f"- ID: {p.product_id}, ¬´{p.name}¬ª, —Ü–µ–Ω–∞: {p.price}")
    text_output = "\n".join(text_lines)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = product_list_keyboard_paginated(products, page=page, page_size=page_size)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        await callback.message.delete()
    except Exception:
        pass
    
    await callback.message.answer(text_output, reply_markup=keyboard)

@admin_product_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.")
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()

@admin_product_router.callback_query(F.data.regexp(r"^product_(\d+)$"))
async def view_product_details(callback: CallbackQuery, repo: RequestsRepo):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è.
    """
    match = re.match(r"^product_(\d+)$", callback.data)
    if not match:
        return
    
    product_id = int(match.group(1))
    product = await repo.products.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
    text = format_product_info(product)
    
    # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ 
    image_url = getattr(product, 'image_url', None)
    if image_url:
        try:
            await callback.message.answer_photo(
                photo=image_url,
                caption=text,
                reply_markup=product_details_keyboard(product_id)
            )
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
        except Exception as e:
            logging.error(f"Error sending product photo: {e}")
            # Fallback to text message if photo can't be sent
            await callback.message.edit_text(
                text,
                reply_markup=product_details_keyboard(product_id)
            )
    else:
        await callback.message.edit_text(
            text,
            reply_markup=product_details_keyboard(product_id)
        )

@admin_product_router.callback_query(F.data.regexp(r"^edit_(\d+)$"))
async def edit_product_handler(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    match = re.match(r"^edit_(\d+)$", callback.data)
    if not match:
        return
    
    product_id = int(match.group(1))
    product = await repo.products.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ç–æ
        if callback.message.photo:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —Ç–µ–∫—Å—Ç
            await callback.message.delete()
            await callback.message.answer(
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ç–æ–≤–∞—Ä–µ ¬´{product.name}¬ª:",
                reply_markup=edit_product_keyboard(product_id)
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ç–æ–≤–∞—Ä–µ ¬´{product.name}¬ª:",
                reply_markup=edit_product_keyboard(product_id)
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}")
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Ç–æ–≤–∞—Ä–µ ¬´{product.name}¬ª:",
            reply_markup=edit_product_keyboard(product_id)
        )
    
    await state.update_data(product_id=product_id)
    
@admin_product_router.callback_query(F.data.regexp(r"^delete_(\d+)$"))
async def delete_product_handler(callback: CallbackQuery, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
    """
    match = re.match(r"^delete_(\d+)$", callback.data)
    if not match:
        return
    
    product_id = int(match.group(1))
    product = await repo.products.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ç–æ
        if callback.message.photo:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –µ—Å—Ç—å, –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –Ω–∞ —Ç–µ–∫—Å—Ç
            await callback.message.delete()
            await callback.message.answer(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ¬´{product.name}¬ª?",
                reply_markup=confirmation_keyboard(product_id)
            )
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –º–æ–∂–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ¬´{product.name}¬ª?",
                reply_markup=confirmation_keyboard(product_id)
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä ¬´{product.name}¬ª?",
            reply_markup=confirmation_keyboard(product_id)
        )

@admin_product_router.callback_query(F.data.regexp(r"^confirm_delete_(\d+)$"))
async def confirm_delete_product(callback: CallbackQuery, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    match = re.match(r"^confirm_delete_(\d+)$", callback.data)
    if not match:
        return
    
    product_id = int(match.group(1))
    product = await repo.products.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = await repo.products.delete_product(product_id)
    
    if success:
        await callback.answer(f"–¢–æ–≤–∞—Ä ¬´{product.name}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", show_alert=True)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
        products = await repo.products.get_all_products()
        
        if not products:
            await callback.message.edit_text(
                "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
                reply_markup=product_management_keyboard()
            )
            return
        
        text_lines = ["–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä. 1):\n"]
        for p in products[:5]:  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            text_lines.append(f"- ID: {p.product_id}, ¬´{p.name}¬ª, —Ü–µ–Ω–∞: {p.price}")
        text_output = "\n".join(text_lines)
        
        keyboard = product_list_keyboard_paginated(products, page=1, page_size=5)
        
        await callback.message.edit_text(text_output, reply_markup=keyboard)
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@admin_product_router.callback_query(F.data.regexp(r"^edit_(\w+)_(\d+)$"))
async def edit_product_field(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞.
    
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª–µ–π:
    - name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    - description: –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    - type: —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
    - material: –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞
    - price: —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
    - image_url: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    """
    match = re.match(r"^edit_(\w+)_(\d+)$", callback.data)
    if not match:
        return
    
    field_name, product_id_str = match.groups()
    product_id = int(product_id_str)
    product = await repo.products.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª–µ–π –∏ –∏—Ö —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    field_titles = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
        "type": "—Ç–∏–ø",
        "material": "–º–∞—Ç–µ—Ä–∏–∞–ª",
        "price": "—Ü–µ–Ω—É",
        "image_url": "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if field_name not in field_titles:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {field_name}")
        await callback.answer("–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.", show_alert=True)
        return
    
    field_title = field_titles[field_name]
    current_value = getattr(product, field_name, "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await state.update_data(
        product_id=product_id, 
        edit_field=field_name, 
        previous_state=PREVIOUS_STATE
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—è
    if field_name == "image_url":
        message_text = f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    else:
        message_text = f"–¢–µ–∫—É—â–µ–µ {field_title}: {current_value}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_title} —Ç–æ–≤–∞—Ä–∞:"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text(
        message_text,
        reply_markup=back_button_keyboard()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    field_state = getattr(ProductManagement, field_name, None)
    if field_state:
        await state.set_state(field_state)
    else:
        logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field_name}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
async def process_field_update(message: Message, state: FSMContext, repo: RequestsRepo, field_name: str, field_value: Any) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        message: Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        repo: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        field_name: –ò–º—è –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        field_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    data = await state.get_data()
    product_id = data.get(PRODUCT_ID)
    
    if not product_id:
        logging.error("process_field_update: product_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö FSM")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")
        return False
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ —Ç–æ–≤–∞—Ä–∞
    try:
        success = await repo.products.update_product_field(product_id, field_name, field_value)
        
        if success:
            product = await repo.products.get_product_by_id(product_id)
            field_titles = {
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
                "type": "–¢–∏–ø",
                "material": "–ú–∞—Ç–µ—Ä–∏–∞–ª",
                "price": "–¶–µ–Ω–∞",
                "image_url": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            }
            
            field_title = field_titles.get(field_name, field_name.capitalize())
            await message.answer(f"{field_title} —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–æ–≤–∞—Ä–∞
            product_info = format_product_info(product)
            await message.answer(
                product_info,
                reply_markup=product_details_keyboard(product_id)
            )
            return True
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è {field_name} —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—è {field_name} —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        return False
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞
@admin_product_router.message(ProductManagement.name)
async def process_new_name(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.
    """
    await process_field_update(message, state, repo, NAME, message.text)
    await state.clear()

@admin_product_router.message(ProductManagement.description)
async def process_new_description(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    await process_field_update(message, state, repo, DESCRIPTION, message.text)
    await state.clear()

@admin_product_router.message(ProductManagement.type)
async def process_new_type(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    await process_field_update(message, state, repo, TYPE, message.text)
    await state.clear()

@admin_product_router.message(ProductManagement.material)
async def process_new_material(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    await process_field_update(message, state, repo, MATERIAL, message.text)
    await state.clear()

@admin_product_router.message(ProductManagement.price)
async def process_new_price(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π
        price_text = message.text.strip()
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        price_text = price_text.replace(',', '.')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∞
        if not all(c.isdigit() or c == '.' for c in price_text):
            raise ValueError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫—É")
            
        # –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        if price_text.count('.') > 1:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
            
        price = float(price_text)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –Ω—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à—É—é —Ü–µ–Ω—É
        if price > 1000000:  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ü–µ–Ω—ã
            await message.answer("–í–≤–µ–¥–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞
        await process_field_update(message, state, repo, PRICE, price)
        await state.clear()
    except ValueError as e:
        error_message = str(e) if str(e) != "could not convert string to float: " else "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã."
        await message.answer(error_message)

@admin_product_router.message(ProductManagement.image_url, F.photo)
async def process_new_image(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    # –ë–µ—Ä–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    photo_id = message.photo[-1].file_id
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –Ω–æ —Å –æ—Å–æ–±–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ
    data = await state.get_data()
    edit_field = data.get(EDIT_FIELD)
    product_id = data.get(PRODUCT_ID)
    
    if edit_field == IMAGE_URL and product_id:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞–ø—Ä—è–º—É—é, —Ç.–∫. –Ω—É–∂–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å —Ñ–æ—Ç–æ
        success = await repo.products.update_product_field(product_id, IMAGE_URL, photo_id)
        
        if success:
            product = await repo.products.get_product_by_id(product_id)
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            product_info = format_product_info(product)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç–æ–≤–∞—Ä–∞ —Å —Ñ–æ—Ç–æ
            image_url = getattr(product, 'image_url', None)
            if image_url:
                try:
                    await message.answer_photo(
                        photo=image_url,
                        caption=product_info,
                        reply_markup=product_details_keyboard(product_id)
                    )
                except Exception as e:
                    logging.error(f"Error sending product photo: {e}")
                    await message.answer(
                        product_info,
                        reply_markup=product_details_keyboard(product_id)
                    )
            else:
                await message.answer(
                    product_info,
                    reply_markup=product_details_keyboard(product_id)
                )
        else:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    await state.clear()

@admin_product_router.callback_query(F.data == "add_product")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await state.update_data({PREVIOUS_STATE: None})  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    await state.set_state(ProductManagement.name)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
async def process_product_creation(message: Message, state: FSMContext, 
                                   current_state: str, next_state: str, 
                                   field_name: str, prompt_text: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        message: Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        current_state: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        next_state: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        field_name: –ò–º—è –ø–æ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        prompt_text: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª {field_name}: {message.text}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await state.update_data({
        PREVIOUS_STATE: current_state,
        field_name: message.text
    })
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ
    await message.answer(prompt_text, reply_markup=back_button_keyboard())
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(next_state)

@admin_product_router.message(ProductManagement.name)
async def set_product_name(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞.
    """
    await process_product_creation(
        message, state,
        ProductManagement.name, ProductManagement.description,
        NAME, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
    )

@admin_product_router.message(ProductManagement.description)
async def set_product_description(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    await process_product_creation(
        message, state,
        ProductManagement.description, ProductManagement.type,
        DESCRIPTION, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–≤–µ—Ä—å', '–∞–∫—Å–µ—Å—Å—É–∞—Ä'):"
    )

@admin_product_router.message(ProductManagement.type)
async def set_product_type(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    await process_product_creation(
        message, state,
        ProductManagement.type, ProductManagement.material,
        TYPE, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:"
    )

@admin_product_router.message(ProductManagement.material)
async def set_product_material(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    await process_product_creation(
        message, state,
        ProductManagement.material, ProductManagement.price,
        MATERIAL, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:"
    )

@admin_product_router.message(ProductManagement.price)
async def set_product_price(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        price = float(message.text)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞: {price}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        await state.update_data({
            PREVIOUS_STATE: ProductManagement.price,
            PRICE: price
        })
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
        await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
        await state.set_state(ProductManagement.image_url)
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

@admin_product_router.message(ProductManagement.image_url, F.photo)
async def set_product_image(message: Message, state: FSMContext, repo: RequestsRepo):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ —Å –ª—É—á—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
    photo_id = message.photo[-1].file_id
    await state.update_data({IMAGE_URL: photo_id})
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ
    data = await state.get_data()

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
    product_data = {
        NAME: data.get(NAME, ""),
        DESCRIPTION: data.get(DESCRIPTION, ""),
        TYPE: data.get(TYPE, ""),
        MATERIAL: data.get(MATERIAL, ""),
        PRICE: data.get(PRICE, 0),
        IMAGE_URL: photo_id
    }
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
        new_product = await repo.products.create_product(product_data)
        logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å ID: {new_product.product_id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
        response_text = f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n\n{format_product_info(new_product)}"
        await message.answer(response_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


@admin_product_router.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥'.")
    data = await state.get_data()
    previous_state = data.get(PREVIOUS_STATE)

    if not previous_state:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:",
            reply_markup=product_management_keyboard()
        )
        await state.clear()
        return

    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    state_prompts = {
        ProductManagement.name: "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        ProductManagement.description: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        ProductManagement.type: "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–≤–µ—Ä—å', '–∞–∫—Å–µ—Å—Å—É–∞—Ä'):",
        ProductManagement.material: "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:",
        ProductManagement.price: "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:",
        ProductManagement.image_url: "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:"
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(previous_state)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    prompt = state_prompts.get(previous_state, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
    field_name = str(previous_state).split(":")[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_value = data.get(field_name)
    
    if current_value:
        prompt = f"{prompt}\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(prompt, reply_markup=back_button_keyboard())
    logging.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é: {previous_state}")
