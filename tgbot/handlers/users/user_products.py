# tgbot/handlers/users/user_products.py

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from tgbot.keyboards.user_products import products_keyboard
from infrastructure.database.repositories.requests import RequestsRepo
from tgbot.misc.callback_factory import ProductViewCallback, FavoriteActionCallback

user_products_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

@user_products_router.message(F.text.casefold() == "–∫–∞—Ç–∞–ª–æ–≥")
async def products_menu(message: Message, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.")
    
    products = await repo.products.get_all_products()
    if products:
        await message.answer(
            text="üì¶ *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ.",
            reply_markup=products_keyboard(products),
            parse_mode="Markdown"
        )
    else:
        logger.warning("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        await message.answer("‚ùå –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")

@user_products_router.callback_query(ProductViewCallback.filter())
async def view_product(callback: CallbackQuery, callback_data: ProductViewCallback, repo: RequestsRepo):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """
    user_id = callback.from_user.id
    product_id = callback_data.product_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}.")
    
    product = await repo.products.get_product_by_id(product_id)
    
    if product:
        text = (
            f"*{product.name}*\n\n"
            f"{product.description}\n"
            f"üîπ *–¢–∏–ø:* {product.type}\n"
            f"üîπ *–ú–∞—Ç–µ—Ä–∏–∞–ª:* {product.material}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {product.price}‚ÇΩ"
        )
        try:
            await callback.message.answer_photo(
                photo=product.image_url,
                caption=text,
                parse_mode="Markdown"
            )
            await callback.answer()
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç {product_id}.")
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@user_products_router.callback_query(FavoriteActionCallback.filter(F.action == "add"))
async def add_favorite(callback: CallbackQuery, callback_data: FavoriteActionCallback, repo: RequestsRepo):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    product_id = callback_data.product_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç {product_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")

    try:
        is_fav = await repo.favorites.is_favorite(user_id, product_id)
        if is_fav:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–æ–¥—É–∫—Ç {product_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
            await callback.answer("‚≠ê –¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.", show_alert=True)
            return
        
        await repo.favorites.add_favorite(user_id, product_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç {product_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        await callback.answer("‚≠ê –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
