from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
import logging
from infrastructure.database.repositories.promotion_repo import PromotionRepo
from infrastructure.database.repositories.products import ProductsRepo
from infrastructure.database.repositories.admin_log_repo import AdminLogRepo
from infrastructure.database.repositories.admin_user_repo import AdminUserRepo
from infrastructure.database.repositories.subscription_repo import SubscriptionRepo
from infrastructure.database.models.promotions import DiscountType
from infrastructure.database.models.subscriptions import SubscriptionType
from tgbot.keyboards.admin_promotion import (
    promotion_management_keyboard,
    promotion_list_keyboard,
    promotion_edit_keyboard,
    product_selection_keyboard,
    admin_back_button
)
from tgbot.filters.admin import AdminFilter

# Set up logging
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏—è–º–∏
class PromotionManagement(StatesGroup):
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏
    add_name = State()
    add_description = State()
    add_discount_type = State()
    add_discount_value = State()
    add_start_date = State()
    add_end_date = State()
    add_select_products = State()
    add_confirm = State()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏
    edit_select_promotion = State()
    edit_select_field = State()
    edit_name = State()
    edit_description = State()
    edit_discount_type = State()
    edit_discount_value = State()
    edit_start_date = State()
    edit_end_date = State()
    edit_is_active = State()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∞–∫—Ü–∏–∏
    manage_products = State()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–∏
    delete_confirm = State()

admin_promotion_router = Router()
admin_promotion_router.message.filter(AdminFilter())
admin_promotion_router.callback_query.filter(AdminFilter())

@admin_promotion_router.callback_query(F.data == "manage_promotions")
async def manage_promotions_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ü–∏—è–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏.
    """
    await callback.message.edit_text(
        "üè∑Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏—è–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=promotion_management_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@admin_promotion_router.callback_query(F.data == "add_promotion")
async def add_promotion_start(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∞–∫—Ü–∏–∏.
    """
    await callback.message.edit_text(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∞–∫—Ü–∏—é!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:",
        reply_markup=admin_back_button("manage_promotions"),
        parse_mode="Markdown"
    )
    await state.set_state(PromotionManagement.add_name)
    await callback.answer()

@admin_promotion_router.message(PromotionManagement.add_name)
async def process_promotion_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ü–∏–∏.
    """
    name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
    if not name or len(name) > 100:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    
    await state.update_data(name=name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏:"
    )
    await state.set_state(PromotionManagement.add_description)

@admin_promotion_router.message(PromotionManagement.add_description)
async def process_promotion_description(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ü–∏–∏.
    """
    description = message.text.strip()
    
    await state.update_data(description=description)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏:\n"
        "1. –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10% –æ—Ç —Ü–µ–Ω—ã)\n"
        "2. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500‚ÇΩ)"
    )
    await state.set_state(PromotionManagement.add_discount_type)

@admin_promotion_router.message(PromotionManagement.add_discount_type)
async def process_discount_type(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∫–∏–¥–∫–∏.
    """
    selection = message.text.strip()
    
    if selection == "1":
        discount_type = DiscountType.PERCENTAGE.value
        await state.update_data(discount_type=discount_type)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10 –¥–ª—è 10%):"
        )
        await state.set_state(PromotionManagement.add_discount_value)
    elif selection == "2":
        discount_type = DiscountType.FIXED.value
        await state.update_data(discount_type=discount_type)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–∫–∏–¥–∫–∏ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500):"
        )
        await state.set_state(PromotionManagement.add_discount_value)
    else:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –∏–ª–∏ 2 –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∫–∏–¥–∫–∏."
        )

@admin_promotion_router.message(PromotionManagement.add_discount_value)
async def process_discount_value(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏.
    """
    try:
        value = float(message.text.strip())
        if value <= 0:
            raise ValueError("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        data = await state.get_data()
        discount_type = data.get("discount_type")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –Ω–µ –±–æ–ª—å—à–µ 100%
        if discount_type == DiscountType.PERCENTAGE.value and value > 100:
            await message.answer(
                "‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100%. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return
            
        await state.update_data(discount_value=value)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–≥–æ–¥–Ω—è)
        today = datetime.now().strftime("%d-%m-%Y")
        await message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:\n"
            f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É ({today})"
        )
        await state.set_state(PromotionManagement.add_start_date)
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∫–∏–¥–∫–∏."
        )

@admin_promotion_router.message(PromotionManagement.add_start_date)
async def process_start_date(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏.
    """
    date_text = message.text.strip()
    
    if not date_text:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    else:
        try:
            start_date = datetime.strptime(date_text, "%d-%m-%Y")
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì."
            )
            return
    
    await state.update_data(start_date=start_date)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì:\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∞–∫—Ü–∏—é –±–µ—Å—Å—Ä–æ—á–Ω–æ–π"
    )
    await state.set_state(PromotionManagement.add_end_date)

@admin_promotion_router.message(PromotionManagement.add_end_date)
async def process_end_date(message: Message, state: FSMContext, products_repo: ProductsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤.
    """
    date_text = message.text.strip()
    
    if not date_text:
        # –ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –∞–∫—Ü–∏—è
        end_date = None
    else:
        try:
            end_date = datetime.strptime(date_text, "%d-%m-%Y")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            data = await state.get_data()
            start_date = data.get("start_date")
            
            if end_date <= start_date:
                await message.answer(
                    "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:"
                )
                return
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì."
            )
            return
    
    await state.update_data(end_date=end_date)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞
    products = await products_repo.get_all_products()
    
    if products:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ü–∏–∏:",
            reply_markup=product_selection_keyboard(products)
        )
        await state.set_state(PromotionManagement.add_select_products)
    else:
        await message.answer(
            "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥."
        )
        await state.clear()

@admin_promotion_router.callback_query(F.data.startswith("select_product_"), PromotionManagement.add_select_products)
async def select_product_for_promotion(callback: CallbackQuery, state: FSMContext, products_repo: ProductsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –∞–∫—Ü–∏–∏.
    """
    product_id = int(callback.data.split("_")[2])
    
    data = await state.get_data()
    selected_products = data.get("selected_products", [])
    
    if product_id in selected_products:
        selected_products.remove(product_id)
    else:
        selected_products.append(product_id)
    
    await state.update_data(selected_products=selected_products)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
    products = await products_repo.get_all_products()
    await callback.message.edit_reply_markup(
        reply_markup=product_selection_keyboard(products, selected_products)
    )
    await callback.answer()

@admin_promotion_router.callback_query(F.data == "confirm_product_selection", PromotionManagement.add_select_products)
async def confirm_product_selection(callback: CallbackQuery, state: FSMContext, products_repo: ProductsRepo):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∞–∫—Ü–∏–∏.
    """
    data = await state.get_data()
    selected_products = data.get("selected_products", [])
    
    if not selected_products:
        await callback.message.edit_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫—Ü–∏–∏.",
            reply_markup=admin_back_button("manage_promotions")
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Å–≤–æ–¥–∫–∏
    product_names = []
    for product_id in selected_products:
        product = await products_repo.get_product_by_id(product_id)
        if product:
            product_names.append(product.name)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    start_date_str = data.get("start_date").strftime("%d-%m-%Y") if data.get("start_date") else "–°–µ–≥–æ–¥–Ω—è"
    end_date_str = data.get("end_date").strftime("%d-%m-%Y") if data.get("end_date") else "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    discount_type_display = "–ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è" if data.get("discount_type") == DiscountType.PERCENTAGE.value else "—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"
    discount_value_display = f"{data.get('discount_value')}%" if data.get("discount_type") == DiscountType.PERCENTAGE.value else f"{data.get('discount_value')}‚ÇΩ"
    
    summary = (
        f"üè∑Ô∏è *–°–≤–æ–¥–∫–∞ –ø–æ –∞–∫—Ü–∏–∏:*\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('name')}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}\n"
        f"–°–∫–∏–¥–∫–∞: {discount_value_display} ({discount_type_display})\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date_str}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date_str}\n"
        f"–¢–æ–≤–∞—Ä—ã: {', '.join(product_names)}\n\n"
        f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    await callback.message.edit_text(summary, parse_mode="Markdown")
    await state.set_state(PromotionManagement.add_confirm)
    await callback.answer()

@admin_promotion_router.message(PromotionManagement.add_confirm)
async def confirm_add_promotion(message: Message, state: FSMContext, 
                               promo_repo: PromotionRepo, admin_repo: AdminUserRepo, 
                               log_repo: AdminLogRepo, sub_repo: SubscriptionRepo, bot):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ü–∏–∏.
    """
    confirmation = message.text.strip().lower()
    
    if confirmation in ["–¥–∞", "yes", "y", "–¥"]:
        data = await state.get_data()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–∏–∏
        promotion_data = {
            "name": data.get("name"),
            "description": data.get("description"),
            "discount_type": data.get("discount_type"),
            "discount_value": data.get("discount_value"),
            "start_date": data.get("start_date"),
            "end_date": data.get("end_date"),
            "is_active": True
        }
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin = await admin_repo.get_admin_by_user_id(message.from_user.id)
        if admin:
            promotion_data["created_by"] = admin.admin_id
        
        # –°–æ–∑–¥–∞–µ–º –∞–∫—Ü–∏—é
        promotion = await promo_repo.create_promotion(promotion_data)
        
        if promotion:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ü–∏—é –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º
            selected_products = data.get("selected_products", [])
            for product_id in selected_products:
                await promo_repo.apply_promotion_to_product(promotion.promo_id, product_id)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            if admin:
                await log_repo.log_action(
                    admin_id=admin.admin_id,
                    action="add_promotion",
                    entity_type="promotion",
                    entity_id=promotion.promo_id,
                    details=f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–∫—Ü–∏—è: {promotion.name} —Å {len(selected_products)} —Ç–æ–≤–∞—Ä–∞–º–∏"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            subscribers = await sub_repo.get_subscribers_by_type(SubscriptionType.PROMOTIONS.value)
            
            if subscribers:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                notification_text = (
                    f"üéâ *–ù–æ–≤–∞—è –∞–∫—Ü–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ!*\n\n"
                    f"*{promotion.name}*\n"
                    f"{promotion.description}\n\n"
                    f"–°–∫–∏–¥–∫–∞: {data.get('discount_value')}% –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç —Å {start_date_str} –ø–æ {end_date_str}\n\n"
                    f"–û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π!"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
                success_count = 0
                for user_id in subscribers:
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=notification_text,
                            parse_mode="Markdown"
                        )
                        success_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                await message.answer(
                    f"‚úÖ –ê–∫—Ü–∏—è '{promotion.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ {len(selected_products)} —Ç–æ–≤–∞—Ä–∞–º!\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {success_count} –∏–∑ {len(subscribers)}"
                )
            else:
                await message.answer(
                    f"‚úÖ –ê–∫—Ü–∏—è '{promotion.name}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ {len(selected_products)} —Ç–æ–≤–∞—Ä–∞–º!"
                )
        else:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    else:
        await message.answer(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        )
    
    await state.clear()

@admin_promotion_router.callback_query(F.data == "view_promotions")
async def view_promotions_list(callback: CallbackQuery, promo_repo: PromotionRepo):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ü–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ü–∏–∏
    promotions = await promo_repo.get_all()
    
    if promotions:
        active_promotions = [p for p in promotions if p.is_active]
        inactive_promotions = [p for p in promotions if not p.is_active]
        
        text = "üè∑Ô∏è *–°–ø–∏—Å–æ–∫ –∞–∫—Ü–∏–π*\n\n"
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏
        if active_promotions:
            text += "*–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏:*\n"
            for i, promo in enumerate(active_promotions, 1):
                status = "‚úÖ –î–µ–π—Å—Ç–≤—É–µ—Ç" if promo.is_valid else "‚è≥ –û–∂–∏–¥–∞–µ—Ç –Ω–∞—á–∞–ª–∞"
                end_date = promo.end_date.strftime("%d.%m.%Y") if promo.end_date else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
                text += f"{i}. {promo.name} - {status} (–¥–æ {end_date})\n"
        else:
            text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ü–∏–π.\n"
            
        text += "\n"
        
        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏
        if inactive_promotions:
            text += "*–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ü–∏–∏:*\n"
            for i, promo in enumerate(inactive_promotions, 1):
                text += f"{i}. {promo.name} - ‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                
        await callback.message.edit_text(
            text,
            reply_markup=promotion_list_keyboard(promotions),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "–ê–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∞–∫—Ü–∏—é.",
            reply_markup=admin_back_button("manage_promotions")
        )
    
    await callback.answer()

@admin_promotion_router.callback_query(F.data.startswith("promotion_"))
async def view_promotion_details(callback: CallbackQuery, promo_repo: PromotionRepo, products_repo: ProductsRepo):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏–∏.
    """
    promo_id = int(callback.data.split("_")[1])
    promotion = await promo_repo.get_by_id(promo_id)
    
    if not promotion:
        await callback.message.edit_text(
            "‚ùå –ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=admin_back_button("view_promotions")
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–∫—Ü–∏—è
    promoted_products = await promo_repo.get_products_for_promotion(promo_id)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
    start_date = promotion.start_date.strftime("%d.%m.%Y")
    end_date = promotion.end_date.strftime("%d.%m.%Y") if promotion.end_date else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∫–∏–¥–∫—É
    discount = f"{promotion.discount_value}%" if promotion.discount_type == DiscountType.PERCENTAGE.value else f"{promotion.discount_value}‚ÇΩ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text = (
        f"üè∑Ô∏è *–ê–∫—Ü–∏—è: {promotion.name}*\n\n"
        f"{promotion.description}\n\n"
        f"–¢–∏–ø —Å–∫–∏–¥–∫–∏: {promotion.discount_type}\n"
        f"–†–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏: {discount}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
        f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if promotion.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    if promoted_products:
        text += "*–¢–æ–≤–∞—Ä—ã –≤ –∞–∫—Ü–∏–∏:*\n"
        for i, product in enumerate(promoted_products[:5], 1):
            text += f"{i}. {product.name} - {product.price}‚ÇΩ\n"
        
        if len(promoted_products) > 5:
            text += f"... –∏ –µ—â–µ {len(promoted_products) - 5} —Ç–æ–≤–∞—Ä–æ–≤\n"
    else:
        text += "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–∫—Ü–∏–∏.\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=promotion_edit_keyboard(promo_id),
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ü–∏–π
@admin_promotion_router.callback_query(F.data.regexp(r"^edit_promotion_(\d+)$"))
async def start_edit_promotion(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ü–∏–∏.
    """
    promo_id = int(callback.data.split('_')[-1])
    
    await state.update_data(promo_id=promo_id)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_field_keyboard(promo_id)
    )
    await state.set_state(PromotionManagement.edit_select_field)
    await callback.answer()

def edit_field_keyboard(promo_id: int) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
    builder.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–≤–∞–Ω–∏–µ",
            callback_data=f"edit_field_name_{promo_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–û–ø–∏—Å–∞–Ω–∏–µ",
            callback_data=f"edit_field_description_{promo_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–¢–∏–ø —Å–∫–∏–¥–∫–∏",
            callback_data=f"edit_field_discount_type_{promo_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏",
            callback_data=f"edit_field_discount_value_{promo_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞",
            callback_data=f"edit_field_start_date_{promo_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è",
            callback_data=f"edit_field_end_date_{promo_id}"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"promotion_{promo_id}"
        )
    )
    
    return builder.as_markup()

@admin_promotion_router.callback_query(PromotionManagement.edit_select_field, F.data.regexp(r"^edit_field_(\w+)_(\d+)$"))
async def edit_promotion_field(callback: CallbackQuery, state: FSMContext, repo: PromotionRepo):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è –∞–∫—Ü–∏–∏.
    """
    field, promo_id = callback.data.split('_')[2:4]
    promo_id = int(promo_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    promotion = await repo.get_promotion_by_id(promo_id)
    if not promotion:
        await callback.answer("–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.clear()
        return
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if field == "name":
        await state.set_state(PromotionManagement.edit_name)
        current_value = promotion.name
        field_name = "–Ω–∞–∑–≤–∞–Ω–∏—è"
    elif field == "description":
        await state.set_state(PromotionManagement.edit_description)
        current_value = promotion.description
        field_name = "–æ–ø–∏—Å–∞–Ω–∏—è"
    elif field == "discount_type":
        await state.set_state(PromotionManagement.edit_discount_type)
        current_value = "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è" if promotion.discount_type == DiscountType.PERCENTAGE.value else "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"
        field_name = "—Ç–∏–ø–∞ —Å–∫–∏–¥–∫–∏"
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø —Å–∫–∏–¥–∫–∏: {current_value}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Å–∫–∏–¥–∫–∏:\n"
            "1. –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å–∫–∏–¥–∫–∞\n"
            "2. –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞",
            reply_markup=admin_back_button(f"edit_promotion_{promo_id}")
        )
        await callback.answer()
        return
    elif field == "discount_value":
        await state.set_state(PromotionManagement.edit_discount_value)
        current_value = promotion.discount_value
        field_name = "–∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏"
    elif field == "start_date":
        await state.set_state(PromotionManagement.edit_start_date)
        current_value = promotion.start_date.strftime("%d-%m-%Y") if promotion.start_date else "–ù–µ –∑–∞–¥–∞–Ω–∞"
        field_name = "–¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"
    elif field == "end_date":
        await state.set_state(PromotionManagement.edit_end_date)
        current_value = promotion.end_date.strftime("%d-%m-%Y") if promotion.end_date else "–ù–µ –∑–∞–¥–∞–Ω–∞"
        field_name = "–¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ", show_alert=True)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(promo_id=promo_id, field=field)
    
    # –í—ã–≤–æ–¥–∏–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {field_name} –∞–∫—Ü–∏–∏\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field_name}:",
        reply_markup=admin_back_button(f"edit_promotion_{promo_id}")
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
@admin_promotion_router.message(PromotionManagement.edit_name)
async def process_edit_name(message: Message, state: FSMContext, repo: PromotionRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–∫—Ü–∏–∏.
    """
    new_name = message.text.strip()
    
    if not new_name or len(new_name) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_id = data.get("promo_id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏
    try:
        updated = await repo.update_promotion(promo_id, {"name": new_name})
        if updated:
            await message.answer(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    promotion = await repo.get_promotion_by_id(promo_id)
    await show_promotion_details(message=message, promo_id=promo_id, promotion=promotion, repo=repo)
    await state.clear()

@admin_promotion_router.message(PromotionManagement.edit_description)
async def process_edit_description(message: Message, state: FSMContext, repo: PromotionRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ü–∏–∏.
    """
    new_description = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_id = data.get("promo_id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏
    try:
        updated = await repo.update_promotion(promo_id, {"description": new_description})
        if updated:
            await message.answer(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    promotion = await repo.get_promotion_by_id(promo_id)
    await show_promotion_details(message=message, promo_id=promo_id, promotion=promotion, repo=repo)
    await state.clear()

@admin_promotion_router.message(PromotionManagement.edit_discount_type)
async def process_edit_discount_type(message: Message, state: FSMContext, repo: PromotionRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Å–∫–∏–¥–∫–∏.
    """
    selection = message.text.strip()
    
    if selection == "1":
        discount_type = DiscountType.PERCENTAGE.value
    elif selection == "2":
        discount_type = DiscountType.FIXED.value
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å–∫–∏–¥–∫–∏ –∏–ª–∏ 2 –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_id = data.get("promo_id")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø —Å–∫–∏–¥–∫–∏
    try:
        updated = await repo.update_promotion(promo_id, {"discount_type": discount_type})
        if updated:
            type_name = "–ø—Ä–æ—Ü–µ–Ω—Ç–Ω—É—é" if discount_type == DiscountType.PERCENTAGE.value else "—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é"
            await message.answer(f"‚úÖ –¢–∏–ø —Å–∫–∏–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {type_name}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∏–ø —Å–∫–∏–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    promotion = await repo.get_promotion_by_id(promo_id)
    await show_promotion_details(message=message, promo_id=promo_id, promotion=promotion, repo=repo)
    await state.clear()

@admin_promotion_router.message(PromotionManagement.edit_discount_value)
async def process_edit_discount_value(message: Message, state: FSMContext, repo: PromotionRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏.
    """
    try:
        new_value = float(message.text.strip())
        if new_value <= 0:
            raise ValueError("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        promo_id = data.get("promo_id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Å–∫–∏–¥–∫–∏
        promotion = await repo.get_promotion_by_id(promo_id)
        if promotion.discount_type == DiscountType.PERCENTAGE.value and new_value > 100:
            await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100%. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏
        updated = await repo.update_promotion(promo_id, {"discount_value": new_value})
        if updated:
            await message.answer(f"‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∫–∏–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å–∫–∏–¥–∫–∏.")
        return
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    promotion = await repo.get_promotion_by_id(promo_id)
    await show_promotion_details(message=message, promo_id=promo_id, promotion=promotion, repo=repo)
    await state.clear()

@admin_promotion_router.message(PromotionManagement.edit_start_date)
async def process_edit_start_date(message: Message, state: FSMContext, repo: PromotionRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏.
    """
    date_text = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_id = data.get("promo_id")
    
    if not date_text:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ
        new_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    else:
        try:
            new_date = datetime.strptime(date_text, "%d-%m-%Y")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏
    try:
        updated = await repo.update_promotion(promo_id, {"start_date": new_date})
        if updated:
            await message.answer(f"‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_date.strftime('%d-%m-%Y')}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    promotion = await repo.get_promotion_by_id(promo_id)
    await show_promotion_details(message=message, promo_id=promo_id, promotion=promotion, repo=repo)
    await state.clear()

@admin_promotion_router.message(PromotionManagement.edit_end_date)
async def process_edit_end_date(message: Message, state: FSMContext, repo: PromotionRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏.
    """
    date_text = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_id = data.get("promo_id")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
    promotion = await repo.get_promotion_by_id(promo_id)
    
    if not date_text:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ (–±–µ—Å—Å—Ä–æ—á–Ω–∞—è –∞–∫—Ü–∏—è)
        new_date = None
    else:
        try:
            new_date = datetime.strptime(date_text, "%d-%m-%Y")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ—Å–ª–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
            if promotion.start_date and new_date < promotion.start_date:
                await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞.")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì.")
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏
    try:
        updated = await repo.update_promotion(promo_id, {"end_date": new_date})
        if updated:
            date_str = new_date.strftime('%d-%m-%Y') if new_date else "–±–µ—Å—Å—Ä–æ—á–Ω–æ"
            await message.answer(f"‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {date_str}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    promotion = await repo.get_promotion_by_id(promo_id)
    await show_promotion_details(message=message, promo_id=promo_id, promotion=promotion, repo=repo)
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ü–∏–∏
@admin_promotion_router.callback_query(F.data.regexp(r"^toggle_promo_status_(\d+)$"))
async def toggle_promotion_status(callback: CallbackQuery, repo: PromotionRepo):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–∫—Ü–∏–∏ (–∞–∫—Ç–∏–≤–Ω–∞/–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞).
    """
    promo_id = int(callback.data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ü–∏—é
    promotion = await repo.get_promotion_by_id(promo_id)
    if not promotion:
        await callback.answer("–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
    new_status = not promotion.is_active
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ü–∏–∏
    try:
        updated = await repo.update_promotion(promo_id, {"is_active": new_status})
        if updated:
            status_str = "–∞–∫—Ç–∏–≤–Ω–æ–π" if new_status else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π"
            await callback.answer(f"–ê–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å {status_str}", show_alert=True)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫—Ü–∏–∏", show_alert=True)
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∞–∫—Ü–∏–∏
    promotion = await repo.get_promotion_by_id(promo_id)
    await show_promotion_details(callback=callback, promo_id=promo_id, promotion=promotion, repo=repo)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏
@admin_promotion_router.callback_query(F.data.regexp(r"^delete_promotion_(\d+)$"))
async def confirm_delete_promotion(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ü–∏–∏.
    """
    promo_id = int(callback.data.split('_')[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∞–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_id=promo_id)
    await state.set_state(PromotionManagement.delete_confirm)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
            callback_data=f"confirm_delete_{promo_id}"
        ),
        InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞",
            callback_data=f"promotion_{promo_id}"
        )
    )
    
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∞–∫—Ü–∏—é?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@admin_promotion_router.callback_query(PromotionManagement.delete_confirm, F.data.regexp(r"^confirm_delete_(\d+)$"))
async def delete_promotion(callback: CallbackQuery, state: FSMContext, repo: PromotionRepo):
    """
    –£–¥–∞–ª—è–µ—Ç –∞–∫—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    promo_id = int(callback.data.split('_')[-1])
    
    # –£–¥–∞–ª—è–µ–º –∞–∫—Ü–∏—é
    try:
        deleted = await repo.delete_promotion(promo_id)
        if deleted:
            await callback.answer("‚úÖ –ê–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫—Ü–∏—é", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ü–∏–π
    await state.clear()
    
    promotions = await repo.get_all_promotions()
    if promotions:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π:",
            reply_markup=promotion_list_keyboard(promotions)
        )
    else:
        await callback.message.edit_text(
            "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ü–∏–π.",
            reply_markup=promotion_management_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∞–∫—Ü–∏–∏
@admin_promotion_router.callback_query(F.data.regexp(r"^manage_promo_products_(\d+)$"))
async def manage_promotion_products(callback: CallbackQuery, state: FSMContext, repo: PromotionRepo, product_repo: ProductsRepo):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –∞–∫—Ü–∏–∏.
    """
    promo_id = int(callback.data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∞–∫—Ü–∏–∏
    promotion = await repo.get_promotion_by_id(promo_id)
    if not promotion:
        await callback.answer("–ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    all_products = await product_repo.get_all_products()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∞–∫—Ü–∏–∏
    promoted_products = await repo.get_promotion_products(promo_id)
    selected_product_ids = [p.product_id for p in promoted_products]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(promo_id=promo_id, selected_products=selected_product_ids)
    await state.set_state(PromotionManagement.manage_products)
    
    await callback.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –∞–∫—Ü–∏–∏ '{promotion.name}'\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏:",
        reply_markup=product_selection_keyboard(all_products, selected_product_ids)
    )
    await callback.answer()

@admin_promotion_router.callback_query(PromotionManagement.manage_products, F.data.regexp(r"^select_product_(\d+)$"))
async def toggle_product_selection(callback: CallbackQuery, state: FSMContext, product_repo: ProductsRepo):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞–º–∏ –∞–∫—Ü–∏–∏.
    """
    product_id = int(callback.data.split('_')[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_id = data.get("promo_id")
    selected_products = data.get("selected_products", [])
    
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä (–¥–æ–±–∞–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º)
    if product_id in selected_products:
        selected_products.remove(product_id)
    else:
        selected_products.append(product_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(selected_products=selected_products)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    all_products = await product_repo.get_all_products()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è –∞–∫—Ü–∏–∏ (ID: {promo_id})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∞–∫—Ü–∏–∏:",
        reply_markup=product_selection_keyboard(all_products, selected_products)
    )
    await callback.answer()

@admin_promotion_router.callback_query(PromotionManagement.manage_products, F.data == "confirm_product_selection")
async def confirm_product_selection(callback: CallbackQuery, state: FSMContext, repo: PromotionRepo):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∞–∫—Ü–∏–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    promo_id = data.get("promo_id")
    selected_products = data.get("selected_products", [])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∞–∫—Ü–∏–∏
    try:
        updated = await repo.update_promotion_products(promo_id, selected_products)
        if updated:
            await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–∫—Ü–∏–∏
    promotion = await repo.get_promotion_by_id(promo_id)
    await show_promotion_details(callback=callback, promo_id=promo_id, promotion=promotion, repo=repo)

async def show_promotion_details(callback: CallbackQuery = None, message: Message = None, promo_id: int = None, promotion = None, repo: PromotionRepo = None):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∞–∫—Ü–∏–∏.
    """
    # –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω promotion, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
    if not promotion:
        promotion = await repo.get_promotion_by_id(promo_id)
    
    if not promotion:
        text = "‚ùå –ê–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        reply_markup = promotion_management_keyboard()
    else:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
        start_date = promotion.start_date.strftime("%d-%m-%Y") if promotion.start_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        end_date = promotion.end_date.strftime("%d-%m-%Y") if promotion.end_date else "–ë–µ—Å—Å—Ä–æ—á–Ω–æ"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∫–∏–¥–∫–∏
        discount_type = "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è" if promotion.discount_type == DiscountType.PERCENTAGE.value else "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"
        discount_value = f"{promotion.discount_value}%" if promotion.discount_type == DiscountType.PERCENTAGE.value else f"{promotion.discount_value}‚ÇΩ"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–∫—Ü–∏–∏
        text = (
            f"üè∑Ô∏è *–ê–∫—Ü–∏—è: {promotion.name}*\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {promotion.description}\n"
            f"üí∞ –°–∫–∏–¥–∫–∞: {discount_type}, {discount_value}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: —Å {start_date} –ø–æ {end_date}\n"
            f"–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if promotion.is_active else '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∞–∫—Ü–∏–∏
        promoted_products = await repo.get_promotion_products(promo_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        text += "üì¶ *–¢–æ–≤–∞—Ä—ã –≤ –∞–∫—Ü–∏–∏:*\n"
        if promoted_products:
            for i, product in enumerate(promoted_products[:5], 1):
                text += f"{i}. {product.name} - {product.price}‚ÇΩ\n"
            
            if len(promoted_products) > 5:
                text += f"... –∏ –µ—â–µ {len(promoted_products) - 5} —Ç–æ–≤–∞—Ä–æ–≤\n"
        else:
            text += "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–∫—Ü–∏–∏.\n"
        
        reply_markup = promotion_edit_keyboard(promo_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if callback:
        await callback.message.edit_text(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    elif message:
        await message.answer(
            text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )