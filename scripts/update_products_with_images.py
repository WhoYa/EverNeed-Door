#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏–∑ –ø–∞–ø–∫–∏ imgs.
"""

import asyncio
import asyncpg
import sys
import os
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from tgbot.config import load_config

# –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
PRODUCTS_DATA = [
    # –î–µ—Ä–µ–≤—è–Ω–Ω—ã–µ –¥–≤–µ—Ä–∏
    {
        "name": "–î–≤–µ—Ä—å –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è ¬´–ö–ª–∞—Å—Å–∏–∫–∞¬ª",
        "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω–∞—è –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–≤–µ—Ä—å –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥—É–±–∞. –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É—é—Ç–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –≤ –¥–æ–º–µ.",
        "type": "–¥–≤–µ—Ä—å",
        "material": "–¥–µ—Ä–µ–≤–æ",
        "price": Decimal("25000.00"),
        "image_path": "imgs/Wood_door_1.jpg"
    },
    {
        "name": "–î–≤–µ—Ä—å –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è ¬´–ú–æ–¥–µ—Ä–Ω¬ª",
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–≤–µ—Ä—å —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º. –ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–æ—Å–Ω—ã.",
        "type": "–¥–≤–µ—Ä—å",
        "material": "–¥–µ—Ä–µ–≤–æ",
        "price": Decimal("22000.00"),
        "image_path": "imgs/Wood_door_2.jpg"
    },
    {
        "name": "–î–≤–µ—Ä—å –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è ¬´–ü—Ä–µ–º–∏—É–º¬ª",
        "description": "–†–æ—Å–∫–æ—à–Ω–∞—è –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è –¥–≤–µ—Ä—å –∏–∑ –º–∞—Å—Å–∏–≤–∞ —è—Å–µ–Ω—è —Å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.",
        "type": "–¥–≤–µ—Ä—å",
        "material": "–¥–µ—Ä–µ–≤–æ",
        "price": Decimal("35000.00"),
        "image_path": "imgs/Wood_door_3.webp"
    },
    # –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–µ –¥–≤–µ—Ä–∏
    {
        "name": "–î–≤–µ—Ä—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è ¬´–°—Ç—Ä–∞–∂¬ª",
        "description": "–ù–∞–¥–µ–∂–Ω–∞—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –≤—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π. –û—Ç–ª–∏—á–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞.",
        "type": "–¥–≤–µ—Ä—å",
        "material": "–º–µ—Ç–∞–ª–ª",
        "price": Decimal("45000.00"),
        "image_path": "imgs/Metal_door_1.jpeg"
    },
    {
        "name": "–î–≤–µ—Ä—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è ¬´–§–æ—Ä—Ç¬ª",
        "description": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –¥–≤–µ—Ä—å —Å –º–Ω–æ–≥–æ—Ç–æ—á–µ—á–Ω—ã–º –∑–∞–º–∫–æ–º. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.",
        "type": "–¥–≤–µ—Ä—å",
        "material": "–º–µ—Ç–∞–ª–ª",
        "price": Decimal("55000.00"),
        "image_path": "imgs/Metal_door_2.webp"
    },
    {
        "name": "–î–≤–µ—Ä—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è ¬´–ó–∞—â–∏—Ç–Ω–∏–∫¬ª",
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è –¥–≤–µ—Ä—å —Å —Ç–µ—Ä–º–æ—Ä–∞–∑—Ä—ã–≤–æ–º –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–¥–µ–ª–∫–æ–π.",
        "type": "–¥–≤–µ—Ä—å",
        "material": "–º–µ—Ç–∞–ª–ª",
        "price": Decimal("48000.00"),
        "image_path": "imgs/Metal_door_3.jpg"
    },
    # –ó–∞–º–∫–∏
    {
        "name": "–ó–∞–º–æ–∫ –≤—Ä–µ–∑–Ω–æ–π ¬´–°–µ–∫—å—é—Ä–∏—Ç–∏ –ü—Ä–æ¬ª",
        "description": "–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—Ä–µ–∑–Ω–æ–π –∑–∞–º–æ–∫ —Å —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º. –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å—Ç–æ–π–∫–æ—Å—Ç—å –∫ –≤–∑–ª–æ–º—É.",
        "type": "–∞–∫—Å–µ—Å—Å—É–∞—Ä",
        "material": "–º–µ—Ç–∞–ª–ª",
        "price": Decimal("8500.00"),
        "image_path": "imgs/Door_locker_1.jpg"
    },
    {
        "name": "–ó–∞–º–æ–∫ –Ω–∞–∫–ª–∞–¥–Ω–æ–π ¬´–ì–∞—Ä–∞–Ω—Ç¬ª",
        "description": "–ù–∞–¥–µ–∂–Ω—ã–π –Ω–∞–∫–ª–∞–¥–Ω–æ–π –∑–∞–º–æ–∫ —Å —Ä–∏–≥–µ–ª—å–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º. –ü—Ä–æ—Å—Ç–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å.",
        "type": "–∞–∫—Å–µ—Å—Å—É–∞—Ä",
        "material": "–º–µ—Ç–∞–ª–ª",
        "price": Decimal("6200.00"),
        "image_path": "imgs/Door_locker_2.jpg"
    },
    {
        "name": "–ó–∞–º–æ–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π ¬´–°–º–∞—Ä—Ç –õ–æ–∫¬ª",
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∑–∞–º–æ–∫ —Å –∫–æ–¥–æ–≤–æ–π –ø–∞–Ω–µ–ª—å—é. –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–æ–¥—É –∏–ª–∏ –∫–∞—Ä—Ç–µ.",
        "type": "–∞–∫—Å–µ—Å—Å—É–∞—Ä",
        "material": "–º–µ—Ç–∞–ª–ª",
        "price": Decimal("15000.00"),
        "image_path": "imgs/Door_locker_3.jpeg"
    }
]

async def update_products_with_images():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏."""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    config = load_config(".env")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(
        host=config.db.host,
        port=config.db.port,
        user=config.db.user,
        password=config.db.password,
        database=config.db.database
    )
    
    try:
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        await conn.execute("DELETE FROM favorites;")
        await conn.execute("DELETE FROM orders;")
        print("üßπ –û—á–∏—â–µ–Ω—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (favorites, orders)")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã
        deleted_count = await conn.execute("DELETE FROM products;")
        print(f"‚ùå –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {deleted_count.split()[1]}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º sequence –¥–ª—è product_id
        await conn.execute("ALTER SEQUENCE products_product_id_seq RESTART WITH 1;")
        print("üîÑ Sequence –¥–ª—è product_id —Å–±—Ä–æ—à–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        for i, product_data in enumerate(PRODUCTS_DATA, 1):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_path = product_data["image_path"]
            if not os.path.exists(image_path):
                print(f"‚ö†Ô∏è –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
                continue
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await conn.execute("""
                INSERT INTO products (name, description, type, material, price, stock_quantity, is_in_stock, image_url)
                VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            """, 
            product_data["name"],
            product_data["description"], 
            product_data["type"],
            product_data["material"],
            product_data["price"],
            50,  # stock_quantity
            True,  # is_in_stock
            image_path  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
            )
            
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä {i}: {product_data['name']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_products = await conn.fetchval("SELECT COUNT(*) FROM products;")
        print(f"\nüìä –ò—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {total_products}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
        products = await conn.fetch("SELECT product_id, name, type, material, price, image_url FROM products ORDER BY product_id;")
        print("\nüì¶ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:")
        for product in products:
            print(f"ID: {product['product_id']}, –ù–∞–∑–≤–∞–Ω–∏–µ: {product['name']}")
            print(f"    –¢–∏–ø: {product['type']}, –ú–∞—Ç–µ—Ä–∏–∞–ª: {product['material']}")
            print(f"    –¶–µ–Ω–∞: {product['price']}‚ÇΩ, –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {product['image_url']}")
            print()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await conn.close()

if __name__ == "__main__":
    asyncio.run(update_products_with_images())