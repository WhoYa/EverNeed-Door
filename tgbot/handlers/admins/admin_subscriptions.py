# tgbot/handlers/admins/admin_subscriptions.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from infrastructure.database.repositories.requests import RequestsRepo
from infrastructure.database.repositories.users import UsersRepo
from infrastructure.database.repositories.logs import LogsRepo
from infrastructure.database.repositories.notifications import NotificationsRepo
from tgbot.keyboards.admin_main_menu import admin_back_button
from tgbot.filters.admin import AdminFilter

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
class SubscriptionManagement(StatesGroup):
    select_notification_type = State()  # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    enter_notification_text = State()   # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    confirm_notification = State()      # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    view_subscribers = State()          # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

admin_subscription_router = Router()
admin_subscription_router.message.filter(AdminFilter())
admin_subscription_router.callback_query.filter(AdminFilter())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
def subscription_management_keyboard():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data="send_notification"),
        InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="list_subscribers"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="subscription_stats"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_main")
    )
    builder.adjust(1)
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
def notification_type_keyboard():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üì£ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="notify_all"),
        InlineKeyboardButton(text="üõçÔ∏è –ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ —Ç–æ–≤–∞—Ä—ã", callback_data="notify_products"),
        InlineKeyboardButton(text="üè∑Ô∏è –ü–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ –∞–∫—Ü–∏–∏", callback_data="notify_promotions"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_subscriptions")
    )
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"
@admin_subscription_router.callback_query(F.data == "manage_subscriptions")
async def manage_subscriptions_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏.
    """
    await callback.message.edit_text(
        text="üîî <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏</b>\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=subscription_management_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
@admin_subscription_router.callback_query(F.data == "send_notification")
async def send_notification_callback(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    await state.set_state(SubscriptionManagement.select_notification_type)
    
    await callback.message.edit_text(
        text="üì© <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        reply_markup=notification_type_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@admin_subscription_router.callback_query(SubscriptionManagement.select_notification_type, F.data.startswith("notify_"))
async def process_notification_type(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞.
    """
    notification_type = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(notification_type=notification_type)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await state.set_state(SubscriptionManagement.enter_notification_text)
    
    type_description = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "products": "–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ —Ç–æ–≤–∞—Ä—ã",
        "promotions": "–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ –∞–∫—Ü–∏–∏"
    }.get(notification_type, "–≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    await callback.message.edit_text(
        text=f"üìù <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ {type_description}:</b>\n\n"
             f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞.",
        reply_markup=admin_back_button("send_notification"),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@admin_subscription_router.message(SubscriptionManagement.enter_notification_text)
async def process_notification_text(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    """
    notification_text = message.text.strip()
    
    if not notification_text:
        await message.answer(
            text="‚ö†Ô∏è –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(notification_text=notification_text)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    notification_type = user_data.get("notification_type")
    
    type_description = {
        "all": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        "products": "–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ —Ç–æ–≤–∞—Ä—ã",
        "promotions": "–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ –∞–∫—Ü–∏–∏"
    }.get(notification_type, "–≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await state.set_state(SubscriptionManagement.confirm_notification)
    
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_send"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_subscriptions")
    )
    builder.adjust(1)
    
    await message.answer(
        text=f"üì© <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏</b>\n\n"
             f"–¢–∏–ø: –æ—Ç–ø—Ä–∞–≤–∫–∞ {type_description}\n"
             f"–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"
             f"{notification_text}\n\n"
             f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@admin_subscription_router.callback_query(SubscriptionManagement.confirm_notification, F.data == "confirm_send")
async def confirm_send_notification(callback: CallbackQuery, state: FSMContext, request: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    notification_type = user_data.get("notification_type")
    notification_text = user_data.get("notification_text")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    users_repo = request.users
    notifications_repo = request.notifications
    logs_repo = request.logs
    
    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if notification_type == "all":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        from sqlalchemy import select
        from infrastructure.database.models.users import User
        
        stmt = select(User.user_id).where(User.active == True)
        result = await users_repo.session.execute(stmt)
        user_ids = [row[0] for row in result]
        
        recipient_description = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    elif notification_type == "products":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ —Ç–æ–≤–∞—Ä—ã
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
        user_ids = []  # –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recipient_description = "–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ —Ç–æ–≤–∞—Ä—ã"
    elif notification_type == "promotions":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ –∞–∫—Ü–∏–∏
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ –∞–∫—Ü–∏–∏
        user_ids = []  # –ó–∞–≥–ª—É—à–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recipient_description = "–ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –Ω–∞ –∞–∫—Ü–∏–∏"
    else:
        user_ids = []
        recipient_description = "–Ω–∏–∫–æ–º—É (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø)"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sent_count = 0
    for user_id in user_ids:
        try:
            await notifications_repo.create_notification(
                user_id=user_id,
                notification_data={
                    "type": "admin_notification",
                    "message": notification_text
                }
            )
            sent_count += 1
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            await logs_repo.create_log(
                user_id=callback.from_user.id,
                action="notification_error",
                details=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
            )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    await logs_repo.create_log(
        user_id=callback.from_user.id,
        action="send_notification",
        details=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {recipient_description}. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}"
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await state.clear()
    
    await callback.message.edit_text(
        text=f"‚úÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
             f"–¢–∏–ø: {recipient_description}\n"
             f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
             f"–¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n{notification_text}",
        reply_markup=admin_back_button("manage_subscriptions"),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
@admin_subscription_router.callback_query(F.data == "list_subscribers")
async def list_subscribers_callback(callback: CallbackQuery, request: RequestsRepo):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_repo = request.users
    
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    subscriber_stats = {
        "all": 42,  # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        "products": 28,  # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä—ã
        "promotions": 35  # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ –∞–∫—Ü–∏–∏
    }
    
    text = "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫</b>\n\n"
    text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {subscriber_stats['all']}\n"
    text += f"–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã: {subscriber_stats['products']}\n"
    text += f"–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞–∫—Ü–∏–∏: {subscriber_stats['promotions']}\n\n"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    from sqlalchemy import select, desc
    from infrastructure.database.models.users import User
    
    stmt = select(User).where(User.active == True).order_by(desc(User.created_at)).limit(5)
    result = await users_repo.session.execute(stmt)
    recent_users = list(result.scalars().all())
    
    if recent_users:
        text += "<b>–ù–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for user in recent_users:
            text += f"ID: {user.user_id}\n"
            text += f"–ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {user.last_name or ''}\n"
            text += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    await callback.message.edit_text(
        text=text,
        reply_markup=admin_back_button("manage_subscriptions"),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"
@admin_subscription_router.callback_query(F.data == "subscription_stats")
async def subscription_stats_callback(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º.
    """
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {
        "total_notifications": 156,  # –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        "read_rate": 78,  # –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—á—Ç–µ–Ω–∏—è
        "unsubscribe_rate": 5,  # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø–∏—Å–æ–∫
        "most_popular": "–ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"  # –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    }
    
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
    text += f"–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['total_notifications']}\n"
    text += f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—á—Ç–µ–Ω–∏—è: {stats['read_rate']}%\n"
    text += f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–ø–∏—Å–æ–∫: {stats['unsubscribe_rate']}%\n"
    text += f"–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {stats['most_popular']}\n\n"
    
    text += "<b>–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:</b>\n"
    text += "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n"
    text += "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
    text += "‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
    
    await callback.message.edit_text(
        text=text,
        reply_markup=admin_back_button("manage_subscriptions"),
        parse_mode="HTML"
    )
    await callback.answer()