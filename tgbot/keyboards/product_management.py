from math import ceil
from typing import List, Optional, Union, Any
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

class KeyboardBuilder:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—â–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    """
    
    @staticmethod
    def create_builder() -> InlineKeyboardBuilder:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardBuilder.
        
        Returns:
            InlineKeyboardBuilder: –ù–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """
        return InlineKeyboardBuilder()
    
    @staticmethod
    def add_navigation_buttons(
        builder: InlineKeyboardBuilder, 
        current_page: int, 
        total_pages: int, 
        callback_prefix: str
    ) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
        
        Args:
            builder: –≠–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardBuilder
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            callback_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
        """
        nav_buttons = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if current_page > 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="<< –ù–∞–∑–∞–¥", 
                    callback_data=f"{callback_prefix}_{current_page-1}"
                )
            )
        
        if current_page < total_pages:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="–î–∞–ª–µ–µ >>", 
                    callback_data=f"{callback_prefix}_{current_page+1}"
                )
            )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        if nav_buttons:
            builder.row(*nav_buttons)
    
    @staticmethod
    def add_back_button(
        builder: InlineKeyboardBuilder, 
        text: str = "–ù–∞–∑–∞–¥", 
        callback_data: str = "go_back"
    ) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        
        Args:
            builder: –≠–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardBuilder
            text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            callback_data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        """
        builder.button(text=text, callback_data=callback_data)
    
    @staticmethod
    def create_confirmation_buttons(
        builder: InlineKeyboardBuilder,
        yes_text: str = "–î–∞",
        no_text: str = "–ù–µ—Ç",
        yes_callback: str = "confirm_yes",
        no_callback: str = "confirm_no"
    ) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–î–∞/–ù–µ—Ç) –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
        
        Args:
            builder: –≠–∫–∑–µ–º–ø–ª—è—Ä InlineKeyboardBuilder
            yes_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–î–∞"
            no_text: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
            yes_callback: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–∫–∏ "–î–∞"
            no_callback: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç"
        """
        builder.button(text=yes_text, callback_data=yes_callback)
        builder.button(text=no_text, callback_data=no_callback)
        builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ

def product_management_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
    """
    builder = KeyboardBuilder.create_builder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product")
    builder.button(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")
    builder.button(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="view_products")
    KeyboardBuilder.add_back_button(builder, text="–ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    builder.adjust(2)  # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()

def product_list_keyboard_paginated(products, page: int = 1, page_size: int = 5) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    
    –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.
    
    Args:
        products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    """
    builder = KeyboardBuilder.create_builder()
    
    total_products = len(products)
    total_pages = ceil(total_products / page_size)  # –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ä–µ–∑ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    page_products = products[start_index:end_index]

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for product in page_products:
        builder.button(
            text=product.name, 
            callback_data=f"product_{product.product_id}"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    KeyboardBuilder.add_navigation_buttons(
        builder, 
        page, 
        total_pages, 
        "view_products_page"
    )

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
    KeyboardBuilder.add_back_button(
        builder,
        text="–ù–∞–∑–∞–¥", 
        callback_data="manage_products"
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ (–∫—Ä–æ–º–µ row –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
    builder.adjust(2)
    return builder.as_markup()

def confirmation_keyboard(product_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º.
    
    Args:
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
    """
    builder = KeyboardBuilder.create_builder()
    KeyboardBuilder.create_confirmation_buttons(
        builder,
        yes_text="–î–∞", 
        no_text="–ù–µ—Ç",
        yes_callback=f"confirm_delete_{product_id}",
        no_callback=f"product_{product_id}"
    )
    return builder.as_markup()

def edit_product_keyboard(product_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    
    Args:
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
    """
    builder = KeyboardBuilder.create_builder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
    field_buttons = [
        ("–ù–∞–∑–≤–∞–Ω–∏–µ", f"edit_name_{product_id}"),
        ("–û–ø–∏—Å–∞–Ω–∏–µ", f"edit_description_{product_id}"),
        ("–¢–∏–ø", f"edit_type_{product_id}"),
        ("–ú–∞—Ç–µ—Ä–∏–∞–ª", f"edit_material_{product_id}"),
        ("–¶–µ–Ω–∞", f"edit_price_{product_id}"),
        ("–§–æ—Ç–æ", f"edit_image_url_{product_id}")
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    for text, callback_data in field_buttons:
        builder.button(text=text, callback_data=callback_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    KeyboardBuilder.add_back_button(
        builder,
        text="–ù–∞–∑–∞–¥", 
        callback_data=f"product_{product_id}"
    )
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(3)
    return builder.as_markup()

def product_details_keyboard(product_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π.
    
    Args:
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    builder = KeyboardBuilder.create_builder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–æ–º
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{product_id}")
    builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{product_id}")
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    KeyboardBuilder.add_back_button(
        builder,
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
        callback_data="view_products"
    )
    
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 3 –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(3)
    return builder.as_markup()
