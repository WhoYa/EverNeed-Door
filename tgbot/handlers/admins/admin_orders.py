# tgbot/handlers/admins/admin_orders.py
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from tgbot.keyboards.admin_main_menu import main_menu_keyboard
from tgbot.misc.states import OrderManagement
from tgbot.filters.admin import AdminFilter
from infrastructure.database.repositories.requests import RequestsRepo
from math import ceil
import re
import logging

admin_orders_router = Router()
admin_orders_router.callback_query.filter(AdminFilter())

def order_list_keyboard_paginated(orders, page: int = 1, page_size: int = 5) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    builder = InlineKeyboardBuilder()
    
    total_orders = len(orders)
    total_pages = ceil(total_orders / page_size)
    
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    page_orders = orders[start_index:end_index]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    for order in page_orders:
        builder.button(
            text=f"–ó–∞–∫–∞–∑ #{order.order_id} - {order.status}",
            callback_data=f"order_{order.order_id}"
        )
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 1:
        nav_buttons.append(
            InlineKeyboardButton(
                text="<< –ù–∞–∑–∞–¥",
                callback_data=f"view_orders_page_{page-1}"
            )
        )
    if page < total_pages:
        nav_buttons.append(
            InlineKeyboardButton(
                text="–î–∞–ª–µ–µ >>",
                callback_data=f"view_orders_page_{page+1}"
            )
        )
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    builder.button(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_main_menu"
    )
    
    builder.adjust(1)
    return builder.as_markup()

def order_details_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
    """
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–∞–¥ –∫ –∑–∞–∫–∞–∑–∞–º", callback_data="view_orders")
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤
@admin_orders_router.callback_query(F.data == "view_orders")
async def view_orders_handler(callback: CallbackQuery, repo: RequestsRepo):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤."""
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    # –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "message is not modified"
    
    orders = await repo.orders.get_all_orders()
    
    if not orders:
        # –î–∞–∂–µ –∑–¥–µ—Å—å –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
        await callback.message.answer(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç 
    text_lines = ["–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (—Å—Ç—Ä. 1):\n"]
    for o in orders[:5]:  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        text_lines.append(f"- #{o.order_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {o.user_id}, —Å—Ç–∞—Ç—É—Å: {o.status}")
    text_output = "\n".join(text_lines)
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1
    keyboard = order_list_keyboard_paginated(orders, page=1, page_size=5)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
    await callback.message.delete()
    await callback.message.answer(text_output, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
@admin_orders_router.callback_query(F.data.regexp(r"^view_orders_page_(\d+)$"))
async def view_orders_page_handler(callback: CallbackQuery, repo: RequestsRepo):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å–ø–∏—Å–∫–µ –∑–∞–∫–∞–∑–æ–≤."""
    match = re.match(r"^view_orders_page_(\d+)$", callback.data)
    if not match:
        return
    
    page = int(match.group(1))
    orders = await repo.orders.get_all_orders()
    
    if not orders or page < 1:
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    text_lines = [f"–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (—Å—Ç—Ä. {page}):\n"]
    page_size = 5
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    for o in orders[start_index:end_index]:
        text_lines.append(f"- #{o.order_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {o.user_id}, —Å—Ç–∞—Ç—É—Å: {o.status}")
    text_output = "\n".join(text_lines)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = order_list_keyboard_paginated(orders, page=page, page_size=page_size)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ
    try:
        await callback.message.delete()
    except Exception:
        pass
        
    await callback.message.answer(text_output, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
@admin_orders_router.callback_query(F.data.regexp(r"^order_(\d+)$"))
async def view_order_details(callback: CallbackQuery, repo: RequestsRepo):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ."""
    match = re.match(r"^order_(\d+)$", callback.data)
    if not match:
        return
    
    order_id = int(match.group(1))
    order = await repo.orders.get_order_by_id(order_id)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = await repo.products.get_product_by_id(order.product_id)
    product_name = product.name if product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await repo.users.get_user_by_id(order.user_id)
    user_name = f"{user.first_name} {user.last_name}" if user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
    text = (
        f"üõí –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ #{order.order_id}:\n\n"
        f"–°—Ç–∞—Ç—É—Å: {order.status}\n"
        f"–¢–æ–≤–∞—Ä: {product_name}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order.quantity}\n"
        f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {order.total_price}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {order.user_id}\n"
        f"–°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        f"–û–±–Ω–æ–≤–ª–µ–Ω: {order.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=order_details_keyboard(order_id)
    )