# tgbot/handlers/users/user_favorites.py

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from tgbot.keyboards.user_favorites import favorites_keyboard, empty_favorites_keyboard
from infrastructure.database.repositories.favorites import FavoritesRepo
from tgbot.misc.callback_factory import FavoriteActionCallback
from infrastructure.database.repositories.products import ProductsRepo
import logging

user_favorites_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

@user_favorites_router.callback_query(F.data == "view_favorites")
async def view_favorites(callback: CallbackQuery, repo: FavoritesRepo):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    favorites = await repo.get_favorites_by_user(user_id=user_id)

    if favorites:
        keyboard = favorites_keyboard(favorites)
        text = "*–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:*\n\n"
        for fav in favorites:
            text += f"‚Ä¢ {fav.product.name}\n"
        await callback.message.edit_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=empty_favorites_keyboard()
        )
    await callback.answer()

@user_favorites_router.callback_query(FavoriteActionCallback.filter(F.action == "remove"))
async def remove_favorite(callback: CallbackQuery, callback_data: FavoriteActionCallback, repo: FavoritesRepo):
    """
    –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.
    """
    user_id = callback.from_user.id
    product_id = callback_data.product_id

    await repo.remove_favorite_by_user_product(user_id=user_id, product_id=product_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–∏–ª –ø—Ä–æ–¥—É–∫—Ç {product_id} –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer("‚≠ê –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.", show_alert=True)

    # –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    favorites = await repo.get_favorites_by_user(user_id=user_id)
    if favorites:
        keyboard = favorites_keyboard(favorites)
        text = "*–í–∞—à–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:*\n\n"
        for fav in favorites:
            text += f"‚Ä¢ {fav.product.name}\n"
        await callback.message.edit_text(
            text=text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=empty_favorites_keyboard()
        )

@user_favorites_router.callback_query(FavoriteActionCallback.filter(F.action == "view"))
async def view_favorite_product(callback: CallbackQuery, callback_data: FavoriteActionCallback, repo: ProductsRepo):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.
    """
    product_id = callback_data.product_id
    product = await repo.get_product_by_id(product_id)

    if product:
        text = (
            f"*{product.name}*\n\n"
            f"{product.description}\n"
            f"üîπ *–¢–∏–ø:* {product.type}\n"
            f"üîπ *–ú–∞—Ç–µ—Ä–∏–∞–ª:* {product.material}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {product.price}‚ÇΩ"
        )
        try:
            await callback.message.answer_photo(
                photo=product.image_url,
                caption=text,
                parse_mode="Markdown"
            )
            await callback.answer()
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç {product_id}.")
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
