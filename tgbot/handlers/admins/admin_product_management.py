# tgbot/handlers/admin_product_management.py
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from tgbot.keyboards.product_management import (
    product_management_keyboard,
    product_list_keyboard_paginated,
    product_details_keyboard
)
from tgbot.keyboards.back_button import back_button_keyboard
from tgbot.misc.states import ProductManagement
from tgbot.keyboards.admin_main_menu import main_menu_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from infrastructure.database.repositories.requests import RequestsRepo 
from tgbot.filters.admin import AdminFilter
import logging
import re


admin_product_router = Router()

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ callback_query –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ
admin_product_router.message.filter(AdminFilter())
admin_product_router.callback_query.filter(AdminFilter())

@admin_product_router.callback_query(F.data == "manage_products")
async def show_product_management_menu(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.
    """
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:",
        reply_markup=product_management_keyboard()
    )

@admin_product_router.callback_query(F.data == "view_products")
async def view_products_handler(callback: CallbackQuery, repo: RequestsRepo):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É 1 —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤."""
    products = await repo.products.get_all_products()
    
    if not products:
        await callback.message.edit_text(
            "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=product_management_keyboard()
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç (–ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
    text_lines = ["–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä. 1):\n"]
    for p in products[:5]:  # —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        text_lines.append(f"- ID: {p.product_id}, ¬´{p.name}¬ª, —Ü–µ–Ω–∞: {p.price}")
    text_output = "\n".join(text_lines)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã 1
    keyboard = product_list_keyboard_paginated(products, page=1, page_size=5)

    await callback.message.edit_text(text_output, reply_markup=keyboard)


@admin_product_router.callback_query(F.data.regexp(r"^view_products_page_(\d+)$"))
async def view_products_page_handler(callback: CallbackQuery, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ "view_products_page_X" –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    match = re.match(r"^view_products_page_(\d+)$", callback.data)
    if not match:
        return

    page = int(match.group(1))

    products = await repo.products.get_all_products()
    total_products = len(products)

    if not products or page < 1:
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", show_alert=True)
        return
    
    # –¢–µ–∫—Å—Ç (–ø–æ –∂–µ–ª–∞–Ω–∏—é) ‚Äì –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, –∫–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
    text_lines = [f"–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (—Å—Ç—Ä. {page}):\n"]
    page_size = 5
    start_index = (page - 1) * page_size
    end_index = start_index + page_size
    for p in products[start_index:end_index]:
        text_lines.append(f"- ID: {p.product_id}, ¬´{p.name}¬ª, —Ü–µ–Ω–∞: {p.price}")
    text_output = "\n".join(text_lines)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = product_list_keyboard_paginated(products, page=page, page_size=page_size)

    await callback.message.edit_text(text_output, reply_markup=keyboard)

@admin_product_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥' –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.")
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    await state.clear()

@admin_product_router.callback_query(F.data.regexp(r"^product_(\d+)$"))
async def view_product_details(callback: CallbackQuery, repo: RequestsRepo):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è.
    """
    match = re.match(r"^product_(\d+)$", callback.data)
    if not match:
        return
    
    product_id = int(match.group(1))
    product = await repo.products.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–µ
    text = (
        f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ:\n\n"
        f"ID: {product.product_id}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product.name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {product.description}\n"
        f"–¢–∏–ø: {product.type}\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {product.material}\n"
        f"–¶–µ–Ω–∞: {product.price}\n"
    )
    
    # –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ 
    if product.image_url:
        await callback.message.answer_photo(
            photo=product.image_url,
            caption=text,
            reply_markup=product_details_keyboard(product_id)
        )
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.delete()
    else:
        await callback.message.edit_text(
            text,
            reply_markup=product_details_keyboard(product_id)
        )

@admin_product_router.callback_query(F.data == "add_product")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.")
    await state.update_data(previous_state=None)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    await state.set_state(ProductManagement.name)

@admin_product_router.message(ProductManagement.name)
async def set_product_name(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏ —Ç–æ–≤–∞—Ä–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –∏–º—è —Ç–æ–≤–∞—Ä–∞: {message.text}")
    await state.update_data(previous_state=ProductManagement.name)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    await state.set_state(ProductManagement.description)

@admin_product_router.message(ProductManagement.description)
async def set_product_description(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {message.text}")
    await state.update_data(previous_state=ProductManagement.description)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–≤–µ—Ä—å', '–∞–∫—Å–µ—Å—Å—É–∞—Ä'):", reply_markup=back_button_keyboard())
    await state.set_state(ProductManagement.type)

@admin_product_router.message(ProductManagement.type)
async def set_product_type(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: {message.text}")
    await state.update_data(previous_state=ProductManagement.type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(type=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    await state.set_state(ProductManagement.material)

@admin_product_router.message(ProductManagement.material)
async def set_product_material(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞: {message.text}")
    await state.update_data(previous_state=ProductManagement.material)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(material=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    await state.set_state(ProductManagement.price)

@admin_product_router.message(ProductManagement.price)
async def set_product_price(message: Message, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        price = float(message.text)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞: {price}")
        await state.update_data(previous_state=ProductManagement.price)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(price=price)
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    await state.set_state(ProductManagement.image_url)

@admin_product_router.message(ProductManagement.image_url, F.photo)
async def set_product_image(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.")
    await state.update_data(image_url=message.photo[-1].file_id)
    data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞
    response_text = (
        f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n\n"
        f"–ò–º—è: {data['name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–¢–∏–ø: {data['type']}\n"
        f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {data['material']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
    )

    await message.answer(response_text)
    await state.clear()

@admin_product_router.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥.
    """
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥'.")
    data = await state.get_data()
    previous_state = data.get("previous_state")

    if not previous_state:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏:",
            reply_markup=product_management_keyboard()
        )
        await state.clear()
        return

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(previous_state)

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if previous_state == ProductManagement.name:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    elif previous_state == ProductManagement.description:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    elif previous_state == ProductManagement.type:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–≤–µ—Ä—å', '–∞–∫—Å–µ—Å—Å—É–∞—Ä'):", reply_markup=back_button_keyboard())
    elif previous_state == ProductManagement.material:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())
    elif previous_state == ProductManagement.price:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=back_button_keyboard())

    logging.info(f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é: {previous_state}")
