# tgbot/handlers/users/user_products.py

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from tgbot.keyboards.user_products import products_keyboard, filter_keyboard, build_materials_keyboard, build_types_keyboard, build_price_range_keyboard
from infrastructure.database.repositories.requests import RequestsRepo
from tgbot.misc.callback_factory import ProductViewCallback, FavoriteActionCallback, FilterCallback, PurchaseCallback
from tgbot.keyboards.purchase import purchase_keyboard, confirm_purchase_keyboard
from tgbot.misc.states import FilterStates

user_products_router = Router()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger(__name__)

@user_products_router.message(F.text.casefold() == "–∫–∞—Ç–∞–ª–æ–≥")
async def products_menu(message: Message, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤.")
    
    products = await repo.products.get_all_products()
    if products:
        await message.answer(
            text="üì¶ *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.",
            reply_markup=products_keyboard(products),
            parse_mode="Markdown"
        )
    else:
        logger.warning("–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
        await message.answer("‚ùå –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")

@user_products_router.callback_query(ProductViewCallback.filter())
async def view_product(callback: CallbackQuery, callback_data: ProductViewCallback, repo: RequestsRepo):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.
    """
    user_id = callback.from_user.id
    product_id = callback_data.product_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id}.")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await repo.logs.create_log(
        user_id=user_id,
        action="view_product",
        details=f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id}"
    )
    
    product = await repo.products.get_product_by_id(product_id)
    
    if product:
        text = (
            f"*{product.name}*\n\n"
            f"{product.description}\n"
            f"üîπ *–¢–∏–ø:* {product.type}\n"
            f"üîπ *–ú–∞—Ç–µ—Ä–∏–∞–ª:* {product.material}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {product.price}‚ÇΩ"
        )
        try:
            from aiogram.types import FSInputFile
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            photo_file = FSInputFile(product.image_url)
            
            await callback.message.answer_photo(
                photo=photo_file,
                caption=text,
                parse_mode="Markdown",
                reply_markup=purchase_keyboard(product_id)
            )
            await callback.answer()
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", show_alert=True)
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–¥—É–∫—Ç {product_id}.")
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

@user_products_router.callback_query(F.data == "filter_products")
async def show_filter_menu(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    await state.clear()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await repo.logs.create_log(
        user_id=user_id,
        action="open_filter_menu",
        details="–û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
    )
    
    await callback.message.edit_text(
        "üîç *–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=filter_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()

@user_products_router.callback_query(FilterCallback.filter(F.action == "material"))
async def select_material(callback: CallbackQuery, repo: RequestsRepo, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    materials = await repo.products.get_available_materials()
    
    if materials:
        await callback.message.edit_text(
            "üîç *–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª:*",
            reply_markup=build_materials_keyboard(materials),
            parse_mode="Markdown"
        )
        await state.set_state(FilterStates.selecting_material)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.", show_alert=True)
    
@user_products_router.callback_query(FilterCallback.filter(F.action == "type"))
async def select_type(callback: CallbackQuery, repo: RequestsRepo, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤
    types = await repo.products.get_available_types()
    
    if types:
        await callback.message.edit_text(
            "üîç *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:*",
            reply_markup=build_types_keyboard(types),
            parse_mode="Markdown"
        )
        await state.set_state(FilterStates.selecting_type)
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)

@user_products_router.callback_query(FilterCallback.filter(F.action == "price"))
async def select_price(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.")
    
    await callback.message.edit_text(
        "üí∞ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:*",
        reply_markup=build_price_range_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(FilterStates.selecting_price)

@user_products_router.callback_query(FilterCallback.filter(F.action == "apply"))
async def apply_filters(callback: CallbackQuery, repo: RequestsRepo, state: FSMContext):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    data = await state.get_data()
    material = data.get("material")
    product_type = data.get("type")
    min_price = data.get("min_price")
    max_price = data.get("max_price")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    logger.info(f"–ü—Ä–∏–º–µ–Ω—è–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: –º–∞—Ç–µ—Ä–∏–∞–ª={material}, —Ç–∏–ø={product_type}, –º–∏–Ω_—Ü–µ–Ω–∞={min_price}, –º–∞–∫—Å_—Ü–µ–Ω–∞={max_price}")
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await repo.logs.create_log(
        user_id=user_id,
        action="filter_products",
        details=f"–§–∏–ª—å—Ç—Ä—ã: –º–∞—Ç–µ—Ä–∏–∞–ª={material}, —Ç–∏–ø={product_type}, —Ü–µ–Ω–∞={min_price}-{max_price}"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    products = await repo.products.filter_products(
        material=material,
        product_type=product_type,
        min_price=min_price,
        max_price=max_price
    )
    
    if products:
        await callback.message.edit_text(
            f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}",
            reply_markup=products_keyboard(products, with_filter=True),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏.",
            reply_markup=filter_keyboard(),
            parse_mode="Markdown"
        )
    
    await callback.answer()
    await state.clear()

@user_products_router.callback_query(FilterCallback.filter(F.action == "reset"))
async def reset_filters(callback: CallbackQuery, repo: RequestsRepo, state: FSMContext):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã.")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
    products = await repo.products.get_all_products()
    
    if products:
        await callback.message.edit_text(
            "üì¶ *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:*\n–§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.",
            reply_markup=products_keyboard(products),
            parse_mode="Markdown"
        )
    else:
        await callback.message.edit_text(
            "‚ùå –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."
        )
    
    await callback.answer("‚úÖ –§–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤
@user_products_router.callback_query(FilterStates.selecting_material)
async def process_material_selection(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞.
    """
    if callback.data == "back_to_filter":
        await show_filter_menu(callback, state, repo)
        return
    
    material = callback.data
    await state.update_data(material=material)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –º–∞—Ç–µ—Ä–∏–∞–ª: {material}")
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –º–∞—Ç–µ—Ä–∏–∞–ª: *{material}*\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
        reply_markup=filter_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(None)
    await callback.answer()

@user_products_router.callback_query(FilterStates.selecting_type)
async def process_type_selection(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    if callback.data == "back_to_filter":
        await show_filter_menu(callback, state, repo)
        return
    
    product_type = callback.data
    await state.update_data(type=product_type)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: {product_type}")
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞: *{product_type}*\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
        reply_markup=filter_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(None)
    await callback.answer()

@user_products_router.callback_query(FilterStates.selecting_price)
async def process_price_selection(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    """
    if callback.data == "back_to_filter":
        await show_filter_menu(callback, state, repo)
        return
    
    price_range = callback.data.split("_")
    min_price = None if price_range[0] == "any" else float(price_range[0])
    max_price = None if price_range[1] == "any" else float(price_range[1])
    
    await state.update_data(min_price=min_price, max_price=max_price)
    
    min_str = "–ª—é–±–∞—è" if min_price is None else f"{min_price}‚ÇΩ"
    max_str = "–ª—é–±–∞—è" if max_price is None else f"{max_price}‚ÇΩ"
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: {min_str} - {max_str}")
    
    await callback.message.edit_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç *{min_str}* –¥–æ *{max_str}*\n\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤:",
        reply_markup=filter_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(None)
    await callback.answer()

@user_products_router.callback_query(FavoriteActionCallback.filter(F.action == "add"))
async def add_favorite(callback: CallbackQuery, callback_data: FavoriteActionCallback, repo: RequestsRepo):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = callback.from_user.id
    product_id = callback_data.product_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç {product_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")

    try:
        is_fav = await repo.favorites.is_favorite(user_id, product_id)
        if is_fav:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–æ–¥—É–∫—Ç {product_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
            await callback.answer("‚≠ê –¢–æ–≤–∞—Ä —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.", show_alert=True)
            return
        
        await repo.favorites.add_favorite(user_id, product_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –ø—Ä–æ–¥—É–∫—Ç {product_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")
        await callback.answer("‚≠ê –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@user_products_router.callback_query(F.data == "back_to_filter")
async def handle_back_to_filter(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ —Ñ–∏–ª—å—Ç—Ä–∞–º.
    """
    await show_filter_menu(callback, state, repo)
    await callback.answer()

@user_products_router.callback_query(F.data == "back_to_catalog")
async def handle_back_to_catalog(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤.
    """
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–æ–≤–∞—Ä–æ–≤.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    products = await repo.products.get_all_products()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback.message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    if products:
        await callback.message.answer(
            text="üì¶ *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.",
            reply_markup=products_keyboard(products),
            parse_mode="Markdown"
        )
    else:
        await callback.message.answer("‚ùå –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
    await callback.answer()

@user_products_router.callback_query(F.data == "view_favorites")
async def handle_view_favorites(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É.
    """
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ user_favorites.py
        from tgbot.handlers.users.user_favorites import view_favorites
        await view_favorites(callback, repo)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@user_products_router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ user_menu.py
        from tgbot.handlers.users.user_menu import main_menu_callback
        await main_menu_callback(callback, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@user_products_router.callback_query(F.data.regexp(r'^\d+_\d+$|^\d+_any$|^any_\d+$'))
async def handle_price_range_selection(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–Ω–æ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    """
    current_state = await state.get_state()
    if current_state == FilterStates.selecting_price:
        # –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await process_price_selection(callback, state, repo)
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        await show_filter_menu(callback, state, repo)
        await callback.answer()

@user_products_router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: CallbackQuery, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    page = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É {page+1} –∫–∞—Ç–∞–ª–æ–≥–∞.")
    
    products = await repo.products.get_all_products()
    if products:
        await callback.message.edit_text(
            text="üì¶ *–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.",
            reply_markup=products_keyboard(products, page=page),
            parse_mode="Markdown"
        )
    await callback.answer()

@user_products_router.callback_query(F.data == "go_back")
async def handle_go_back(callback: CallbackQuery, state: FSMContext, repo: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥".
    –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏, –≤–µ—Ä–Ω—É—Ç—å –∫ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        if current_state.startswith('FilterStates'):
            await show_filter_menu(callback, state, repo)
            return
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ user_menu.py
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.message.edit_text(
            text="–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
            reply_markup=None
        )
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        from tgbot.handlers.users.user_menu import main_menu_callback
        await main_menu_callback(callback, state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Ä–∞–Ω: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

# Purchase handlers
@user_products_router.callback_query(PurchaseCallback.filter(F.action == "buy"))
async def initiate_purchase(callback: CallbackQuery, callback_data: PurchaseCallback, repo: RequestsRepo):
    """
    –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞.
    """
    user_id = callback.from_user.id
    product_id = callback_data.product_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ {product_id}.")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    product = await repo.products.get_product_by_id(product_id)
    
    if not product:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    if not product.is_in_stock:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ.", show_alert=True)
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await repo.logs.create_log(
        user_id=user_id,
        action="initiate_purchase",
        details=f"–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id}"
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    text = (
        f"üõí *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n"
        f"–¢–æ–≤–∞—Ä: *{product.name}*\n"
        f"–¶–µ–Ω–∞: *{product.price}‚ÇΩ*\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
    )
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback.message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    
    await callback.message.answer(
        text=text,
        reply_markup=confirm_purchase_keyboard(product_id),
        parse_mode="Markdown"
    )
    await callback.answer()

@user_products_router.callback_query(PurchaseCallback.filter(F.action == "confirm"))
async def confirm_purchase(callback: CallbackQuery, callback_data: PurchaseCallback, repo: RequestsRepo):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑.
    """
    user_id = callback.from_user.id
    product_id = callback_data.product_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ {product_id}.")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product = await repo.products.get_product_by_id(product_id)
        
        if not product:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        if not product.is_in_stock:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ.", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = {
            "user_id": user_id,
            "product_id": product_id,
            "quantity": 1,
            "total_price": float(product.price),
            "status": "–ù–æ–≤—ã–π"
        }
        
        order = await repo.orders.create_order(order_data)
        
        if order:
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            await repo.logs.create_log(
                user_id=user_id,
                action="order_created",
                details=f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order.order_id} –Ω–∞ —Ç–æ–≤–∞—Ä {product.name}"
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success_text = (
                f"‚úÖ *–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n"
                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: *#{order.order_id}*\n"
                f"–¢–æ–≤–∞—Ä: *{product.name}*\n"
                f"–°—É–º–º–∞: *{product.price}‚ÇΩ*\n"
                f"–°—Ç–∞—Ç—É—Å: *{order.status}*\n\n"
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            from aiogram.types import InlineKeyboardButton
            
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É",
                    callback_data="back_to_catalog"
                )
            )
            
            await callback.message.edit_text(
                text=success_text,
                parse_mode="Markdown",
                reply_markup=builder.as_markup()
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            await notify_admins_about_new_order(order, product, callback.from_user, repo)
            
            await callback.answer("‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!", show_alert=True)
            logger.info(f"–ó–∞–∫–∞–∑ #{order.order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ —Ç–æ–≤–∞—Ä {product_id}.")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@user_products_router.callback_query(PurchaseCallback.filter(F.action == "cancel"))
async def cancel_purchase(callback: CallbackQuery, callback_data: PurchaseCallback, repo: RequestsRepo):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞.
    """
    user_id = callback.from_user.id
    product_id = callback_data.product_id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞ {product_id}.")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await repo.logs.create_log(
        user_id=user_id,
        action="cancel_purchase",
        details=f"–û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ —Å ID {product_id}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–∞–ª–æ–≥—É
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É",
            callback_data="back_to_catalog"
        )
    )
    
    await callback.message.edit_text(
        text="‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=builder.as_markup()
    )
    await callback.answer("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def notify_admins_about_new_order(order, product, user, repo: RequestsRepo):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.
    """
    try:
        from tgbot.config import load_config
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ .env
        config = load_config(".env")
        admin_ids = config.tg_bot.admin_ids
        
        if not admin_ids:
            logger.warning("–ù–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_text = (
            f"üîî *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.order_id}*\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username if user.username else '–ë–µ–∑ username'} (ID: {user.id})\n"
            f"üì¶ –¢–æ–≤–∞—Ä: *{product.name}*\n"
            f"üí∞ –°—É–º–º–∞: *{product.price}‚ÇΩ*\n"
            f"üìÖ –î–∞—Ç–∞: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
        for admin_id in admin_ids:
            try:
                from aiogram import Bot
                
                # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                bot = Bot(token=config.tg_bot.token)
                
                await bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode="Markdown"
                )
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
                await bot.session.close()
                
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ #{order.order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–∫–∞–∑–µ #{order.order_id}: {e}")
