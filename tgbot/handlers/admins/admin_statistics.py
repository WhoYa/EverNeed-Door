# tgbot/handlers/admins/admin_statistics.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from datetime import datetime, timedelta
from infrastructure.database.repositories.logs import LogsRepo
from infrastructure.database.repositories.products import ProductsRepo
from infrastructure.database.repositories.requests import RequestsRepo
from tgbot.keyboards.admin_main_menu import admin_back_button
from tgbot.filters.admin import AdminFilter

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
class StatsViewing(StatesGroup):
    select_period = State()  # –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    select_log_filter = State()  # –í—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –ª–æ–≥–æ–≤

admin_stats_router = Router()
admin_stats_router.message.filter(AdminFilter())
admin_stats_router.callback_query.filter(AdminFilter())

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def stats_menu_keyboard():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="view_product_stats"),
        InlineKeyboardButton(text="üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="view_user_logs"),
        InlineKeyboardButton(text="üë§ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", callback_data="popular_products"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_main")
    )
    builder.adjust(1)
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
def period_selection_keyboard():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="period_day"),
        InlineKeyboardButton(text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="period_week"),
        InlineKeyboardButton(text="üìÖ –ó–∞ –º–µ—Å—è—Ü", callback_data="period_month"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_statistics")
    )
    builder.adjust(1)
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
def log_filter_keyboard():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text="üîç –ü—Ä–æ—Å–º–æ—Ç—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤", callback_data="log_view_product"),
        InlineKeyboardButton(text="‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="log_favorite"),
        InlineKeyboardButton(text="üõí –ó–∞–∫–∞–∑—ã", callback_data="log_order"),
        InlineKeyboardButton(text="‚öôÔ∏è –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="log_all"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="view_statistics")
    )
    builder.adjust(1)
    return builder.as_markup()

@admin_stats_router.callback_query(F.data == "view_statistics")
async def view_statistics_menu(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –ª–æ–≥–æ–≤.
    """
    await callback.message.edit_text(
        text="üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –ª–æ–≥–∏</b>\n\n"
             "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=stats_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_stats_router.callback_query(F.data == "view_product_stats")
async def view_product_stats(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    await state.set_state(StatsViewing.select_period)
    await state.update_data(stats_type="product")
    
    await callback.message.edit_text(
        text="üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:</b>",
        reply_markup=period_selection_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_stats_router.callback_query(F.data == "view_user_logs")
async def view_user_logs(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    await state.set_state(StatsViewing.select_log_filter)
    
    await callback.message.edit_text(
        text="üîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤:</b>",
        reply_markup=log_filter_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_stats_router.callback_query(F.data == "popular_products")
async def view_popular_products(callback: CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.
    """
    await state.set_state(StatsViewing.select_period)
    await state.update_data(stats_type="popular")
    
    await callback.message.edit_text(
        text="üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>",
        reply_markup=period_selection_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_stats_router.callback_query(F.data.startswith("period_"))
async def process_period_selection(callback: CallbackQuery, state: FSMContext, request: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–ø–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_data = await state.get_data()
    stats_type = user_data.get("stats_type", "product")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥
    period = callback.data.split("_")[1]
    now = datetime.now()
    
    if period == "day":
        start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
        period_name = "–∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    elif period == "week":
        start_date = now - timedelta(days=7)
        period_name = "–∑–∞ –Ω–µ–¥–µ–ª—é"
    elif period == "month":
        start_date = now - timedelta(days=30)
        period_name = "–∑–∞ –º–µ—Å—è—Ü"
    else:
        start_date = now - timedelta(days=7)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–µ–ª—è
        period_name = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    if stats_type == "product":
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        product_stats = [
            {"name": "–î–≤–µ—Ä—å –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è", "views": 45, "orders": 5},
            {"name": "–î–≤–µ—Ä—å –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è", "views": 32, "orders": 3},
            {"name": "–†—É—á–∫–∞ –¥–≤–µ—Ä–Ω–∞—è", "views": 28, "orders": 8},
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ {period_name}</b>\n\n"
        for prod in product_stats:
            text += f"üì¶ <b>{prod['name']}</b>\n"
            text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {prod['views']}\n"
            text += f"üõí –ó–∞–∫–∞–∑—ã: {prod['orders']}\n\n"
        
    elif stats_type == "popular":
        # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        logs_repo = request.logs
        products_repo = request.products
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –ª–æ–≥–∞–º
        popular_products = await logs_repo.get_popular_products(
            days=30 if period == "month" else (7 if period == "week" else 1)
        )
        
        text = f"üîù <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã {period_name}</b>\n\n"
        
        if popular_products:
            for idx, prod_data in enumerate(popular_products[:5], 1):
                product = await products_repo.get_product_by_id(prod_data["product_id"])
                if product:
                    text += f"{idx}. <b>{product.name}</b>\n"
                    text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {prod_data['views']}\n\n"
        else:
            text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
    
    else:
        text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await state.clear()
    
    await callback.message.edit_text(
        text=text,
        reply_markup=admin_back_button("view_statistics"),
        parse_mode="HTML"
    )
    await callback.answer()

@admin_stats_router.callback_query(F.data.startswith("log_"))
async def process_log_filter(callback: CallbackQuery, state: FSMContext, request: RequestsRepo):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–∏–ª—å—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–∏.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–æ–≥–æ–≤
    log_type = callback.data.split("_")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    logs_repo = request.logs
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ª–æ–≥–∏ –ø–æ —Ç–∏–ø—É
    if log_type == "all":
        logs = await logs_repo.get_logs_by_date_range(
            datetime.now() - timedelta(days=7),
            datetime.now(),
            limit=20
        )
        filter_name = "–≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π"
    elif log_type == "view_product":
        logs = await logs_repo.get_logs_by_action("view_product", limit=20)
        filter_name = "–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"
    elif log_type == "favorite":
        logs = await logs_repo.get_logs_by_action("add_favorite", limit=20)
        filter_name = "–¥–æ–±–∞–≤–ª–µ–Ω–∏–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    elif log_type == "order":
        logs = await logs_repo.get_logs_by_action("create_order", limit=20)
        filter_name = "–∑–∞–∫–∞–∑–æ–≤"
    else:
        logs = []
        filter_name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    text = f"üìù <b>–õ–æ–≥–∏ {filter_name}</b>\n\n"
    
    if logs:
        for log in logs:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            date_str = log.timestamp.strftime("%d.%m.%Y %H:%M")
            text += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {log.user_id}</b>\n"
            text += f"üïí {date_str}\n"
            text += f"üîπ –î–µ–π—Å—Ç–≤–∏–µ: {log.action}\n"
            if log.details:
                text += f"üìÑ –î–µ—Ç–∞–ª–∏: {log.details}\n"
            text += "\n"
    else:
        text += "–ù–µ—Ç –ª–æ–≥–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await state.clear()
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
    if len(text) > 4000:
        text = text[:3997] + "..."
    
    await callback.message.edit_text(
        text=text,
        reply_markup=admin_back_button("view_statistics"),
        parse_mode="HTML"
    )
    await callback.answer()